"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[88567],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var o=t(96540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}},40310:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"Algorithm_Application/model_zoo/bpu_infer_lib_intro","title":"4.1.2 Quick Start with Model Zoo","description":"Overview","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/04_Algorithm_Application/01_model_zoo/bpu_infer_lib_intro.md","sourceDirName":"04_Algorithm_Application/01_model_zoo","slug":"/Algorithm_Application/model_zoo/bpu_infer_lib_intro","permalink":"/rdk_doc/en/Algorithm_Application/model_zoo/bpu_infer_lib_intro","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1754992996000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"4.1.1 Model Zoo Overview","permalink":"/rdk_doc/en/Algorithm_Application/model_zoo/model_zoo_intro"},"next":{"title":"4.1.3 Model Zoo Inference API","permalink":"/rdk_doc/en/Algorithm_Application/model_zoo/infer_api"}}');var i=t(74848),r=t(28453);const s={sidebar_position:2},l="4.1.2 Quick Start with Model Zoo",d={},a=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Model Loading",id:"model-loading",level:3},{value:"Reading Inputs",id:"reading-inputs",level:3},{value:"Model Inference",id:"model-inference",level:3},{value:"Retrieving Outputs",id:"retrieving-outputs",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"412-quick-start-with-model-zoo",children:"4.1.2 Quick Start with Model Zoo"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The board-side inference interface used by ModelZoo is ",(0,i.jsx)(n.strong,{children:"bpu_infer_lib"}),", which is a Python wrapper for the C++ inference interface libdnn. It is designed to be ",(0,i.jsx)(n.strong,{children:"easy to install, user-friendly, and quick to get started"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.p,{children:"You can install bpu_infer_lib on RDK series development boards using the following commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# For RDK X5, use:\npip install bpu_infer_lib_x5 -i http://sdk.d-robotics.cc:8080/simple/  --trusted-host sdk.d-robotics.cc\n\n# For RDK X3, use:\npip install bpu_infer_lib_x3 -i http://sdk.d-robotics.cc:8080/simple/ --trusted-host sdk.d-robotics.cc\n"})}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.p,{children:"This quick start guide uses the large detection model yoloworld from ModelZoo as an example to demonstrate the basic usage of the bpu_infer_lib inference library."}),"\n",(0,i.jsx)(n.admonition,{title:"Tip",type:"tip",children:(0,i.jsxs)(n.p,{children:["Yoloworld repository: ",(0,i.jsx)(n.a,{href:"https://github.com/D-Robotics/rdk_model_zoo/tree/main/demos/llm/yoloworld",children:"https://github.com/D-Robotics/rdk_model_zoo/tree/main/demos/llm/yoloworld"})]})}),"\n",(0,i.jsxs)(n.p,{children:["The repository provides a ready-to-deploy heterogeneous model ",(0,i.jsx)(n.code,{children:"yolo_world.bin"})," for RDK series development boards."]}),"\n",(0,i.jsxs)(n.p,{children:["Assuming you have downloaded the model, you can import the bpu_infer_lib inference library and use its most important class, ",(0,i.jsx)(n.strong,{children:"Infer"}),", to create an object:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import bpu_infer_lib\ninf = bpu_infer_lib.Infer(False)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"inf"})," object is responsible for the ",(0,i.jsx)(n.strong,{children:"entire pipeline: model loading, input reading, inference, and output retrieval"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The constructor of this object takes a parameter named ",(0,i.jsx)(n.code,{children:"debug"})," (type: bool), which enables debug mode if set to True, providing more verbose output."]}),"\n",(0,i.jsx)(n.h3,{id:"model-loading",children:"Model Loading"}),"\n",(0,i.jsxs)(n.p,{children:["To load a model, call the ",(0,i.jsx)(n.code,{children:"load_model"})," member function of the ",(0,i.jsx)(n.code,{children:"inf"})," object. This function takes the path to a heterogeneous ",(0,i.jsx)(n.code,{children:".bin"})," model and loads it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'inf.load_model("yolo_world.bin")\n'})}),"\n",(0,i.jsx)(n.p,{children:"After loading the model, you can check the required input and output properties. For example, you can view:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The number of model inputs"}),"\n",(0,i.jsx)(n.li,{children:"The layout of each input tensor"}),"\n",(0,i.jsx)(n.li,{children:"The data type of each input tensor"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Number of model\'s inputs:", len(inf.inputs))\nprint("Input[0]\'s tensor layout:", inf.inputs[0].properties.tensorLayout)\nprint("Input[0]\'s tensor type:", inf.inputs[0].properties.tensorType)\nprint("Input[1]\'s tensor layout:", inf.inputs[1].properties.tensorLayout)\nprint("Input[1]\'s tensor type:", inf.inputs[1].properties.tensorType)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Number of model's inputs: 2\nInput[0]'s tensor layout: HB_DNN_LAYOUT_NCHW\nInput[0]'s tensor type: HB_DNN_TENSOR_TYPE_F32\nInput[1]'s tensor layout: HB_DNN_LAYOUT_NCHW\nInput[1]'s tensor type: HB_DNN_TENSOR_TYPE_F32\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similarly, you can check:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The number of model outputs"}),"\n",(0,i.jsx)(n.li,{children:"The layout of each output tensor"}),"\n",(0,i.jsx)(n.li,{children:"The data type of each output tensor"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Number of model\'s outputs:", len(inf.outputs))\nprint("Output[0]\'s tensor layout:", inf.outputs[0].properties.tensorLayout)\nprint("Output[0]\'s tensor type:", inf.outputs[0].properties.tensorType)\nprint("Output[1]\'s tensor layout:", inf.outputs[1].properties.tensorLayout)\nprint("Output[1]\'s tensor type:", inf.outputs[1].properties.tensorType)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Number of model's outputs: 2\nOutput[0]'s tensor layout: HB_DNN_LAYOUT_NCHW\nOutput[0]'s tensor type: HB_DNN_TENSOR_TYPE_F32\nOutput[1]'s tensor layout: HB_DNN_LAYOUT_NCHW\nOutput[1]'s tensor type: HB_DNN_TENSOR_TYPE_F32\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reading-inputs",children:"Reading Inputs"}),"\n",(0,i.jsxs)(n.p,{children:["To read inputs, use the ",(0,i.jsx)(n.code,{children:"inf.read_input"})," member function, which takes two parameters:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The first parameter is a numpy array matching the model's input type."}),"\n",(0,i.jsx)(n.li,{children:"The second parameter is the input index (starting from 0; for single-input models, use 0)."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For the yoloworld model, use this interface to read the two preprocessed inputs: ",(0,i.jsx)(n.code,{children:"input_image"})," and ",(0,i.jsx)(n.code,{children:"text_embeddings"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"inf.read_input(input_image, 0)\ninf.read_input(text_embeddings, 1)\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Did you know?",type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"inf.read_input"})," automatically checks the data type and shape of the input numpy array. Incompatible types or shapes will be validated and rejected, preventing invalid inputs from being read by the model."]})}),"\n",(0,i.jsx)(n.h3,{id:"model-inference",children:"Model Inference"}),"\n",(0,i.jsx)(n.p,{children:"After loading the model and reading the inputs, you can perform inference."}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"inf.forward"})," function, which takes no parameters and can be called directly after model loading and input reading:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"inf.forward()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"retrieving-outputs",children:"Retrieving Outputs"}),"\n",(0,i.jsxs)(n.p,{children:["Once inference is complete on the BPU, use the ",(0,i.jsx)(n.code,{children:"inf.get_output"})," function to retrieve the results. This function takes no parameters and can be called directly:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"inf.get_output()\n"})}),"\n",(0,i.jsx)(n.p,{children:"The inference results are numpy arrays. You can access the two outputs as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"classes_scores = inf.outputs[0].data\nbboxes = inf.outputs[1].data\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);