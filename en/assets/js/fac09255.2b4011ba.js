"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[36521],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},36295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Algorithm_Application/model_zoo/infer_api","title":"4.3.3 ModelZoo Inference Interface","description":"Overview","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/04_Algorithm_Application/03_model_zoo/infer_api.md","sourceDirName":"04_Algorithm_Application/03_model_zoo","slug":"/Algorithm_Application/model_zoo/infer_api","permalink":"/rdk_doc/en/Algorithm_Application/model_zoo/infer_api","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1750480041000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"4.3.2 ModelZoo Quick Start","permalink":"/rdk_doc/en/Algorithm_Application/model_zoo/bpu_infer_lib_intro"},"next":{"title":"5. \u673a\u5668\u4eba\u5e94\u7528\u5f00\u53d1","permalink":"/rdk_doc/en/Robot_development"}}');var i=t(74848),o=t(28453);const s={sidebar_position:3},l="4.3.3 ModelZoo Inference Interface",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Infer Object",id:"infer-object",level:2},{value:"Infer",id:"infer",level:3},{value:"load_model",id:"load_model",level:3},{value:"read_input",id:"read_input",level:3},{value:"forward",id:"forward",level:3},{value:"get_output",id:"get_output",level:3}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"433-modelzoo-inference-interface",children:"4.3.3 ModelZoo Inference Interface"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The board-side inference interface used by ModelZoo is ",(0,i.jsx)(n.strong,{children:"bpu_infer_lib"}),". In the previous section, we discussed the installation method, quick start method, and usage guide of bpu_infer_lib."]}),"\n",(0,i.jsx)(n.p,{children:"In this section, we will specifically introduce the details and usage methods of each API interface in bpu_infer_lib."}),"\n",(0,i.jsx)(n.h2,{id:"infer-object",children:"Infer Object"}),"\n",(0,i.jsxs)(n.p,{children:["The Infer object is the one that connects the entire inference process. Constructing an Infer object, it will be responsible for the whole process of ",(0,i.jsx)(n.strong,{children:"model loading, input reading, model inference, and output acquisition"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"infer",children:"Infer"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"This function is the constructor of the Infer object, which is generally used after the import statement of bpu_infer_lib."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Parameter Type"}),(0,i.jsx)(n.th,{children:"Definition Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"debug"}),(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"Whether to provide debug printing for subsequent inference chains"})]})})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"import bpu_infer_lib\ninf = bpu_infer_lib.Infer(True)\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Infer"}),(0,i.jsx)(n.td,{children:"Returns an Infer class object, providing subsequent usable interfaces"})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"load_model",children:"load_model"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"The load_model function is a member function of the Infer object, used to load the DiGua BPU heterogeneous model."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Parameter Type"}),(0,i.jsx)(n.th,{children:"Definition Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"model_path"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"The storage path of the DiGua BPU heterogeneous model .bin file"})]})})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'inf.load_model("yolo_world.bin")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["After the model is loaded, we can view the attributes required for the model's inputs and outputs. For example, we can view the following information:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The number of model inputs"}),"\n",(0,i.jsx)(n.li,{children:"The data layout (layout) required for each model input"}),"\n",(0,i.jsx)(n.li,{children:"The data type (type) required for each model input"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'print("Number of model\'s inputs:", len(inf.inputs))\nprint("Input[0]\'s tensor layout:", inf.inputs[0].properties.tensorLayout)\nprint("Input[0]\'s tensor type:", inf.inputs[0].properties.tensorType)\nprint("Input[1]\'s tensor layout:", inf.inputs[1].properties.tensorLayout)\nprint("Input[1]\'s tensor type:", inf.inputs[1].properties.tensorType)\n'})}),"\n",(0,i.jsx)(n.p,{children:"The results are as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Number of model's inputs: 2\nInput[0]'s tensor layout: HB_DNN_LAYOUT_NCHW\nInput[0]'s tensor type: HB_DNN_TENSOR_TYPE_F32\nInput[1]'s tensor layout: HB_DNN_LAYOUT_NCHW\nInput[1]'s tensor type: HB_DNN_TENSOR_TYPE_F32\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Similarly, we can also view:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The number of model outputs"}),"\n",(0,i.jsx)(n.li,{children:"The data layout (layout) required for each model output"}),"\n",(0,i.jsx)(n.li,{children:"The data type (type) required for each model output"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'print("Number of model\'s outputs:", len(inf.outputs))\nprint("Output[0]\'s tensor layout:", inf.outputs[0].properties.tensorLayout)\nprint("Output[0]\'s tensor type:", inf.outputs[0].properties.tensorType)\nprint("Output[1]\'s tensor layout:", inf.outputs[1].properties.tensorLayout)\nprint("Output[1]\'s tensor type:", inf.outputs[1].properties.tensorType)\n'})}),"\n",(0,i.jsx)(n.p,{children:"The results are as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Number of model's outputs: 2\nOutput[0]'s tensor layout: HB_DNN_LAYOUT_NCHW\nOutput[0]'s tensor type: HB_DNN_TENSOR_TYPE_F32\nOutput[1]'s tensor layout: HB_DNN_LAYOUT_NCHW\nOutput[1]'s tensor type: HB_DNN_TENSOR_TYPE_F32\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"Returns whether the model is loaded successfully"})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"read_input",children:"read_input"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"The read_input function is a member function of the Infer object, used to read a preprocessed numpy array input."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Parameter Type"}),(0,i.jsx)(n.th,{children:"Definition Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"input"}),(0,i.jsx)(n.td,{children:"np.array"}),(0,i.jsx)(n.td,{children:"The corresponding input numpy array"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"index"}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:"The index of the corresponding input numpy array. After load_model, debug can be turned on to view the order of multiple inputs. For single-input models, input index=0 will suffice"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"inf.read_input(input_image, 0)\ninf.read_input(text_embeddings, 1)\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Did you know",type:"tip",children:(0,i.jsx)(n.p,{children:"inf.read_input will automatically check the data type and size of the numpy array input by the developer. Inappropriate data types and sizes will be checked. This prevents unreasonable inputs from being read by the model."})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"Returns whether the numpy array at the corresponding index is correctly read into the Infer object"})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"forward",children:"forward"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"The forward function is a member function of the Infer object, generally used after reading the model input to perform the inference of the DiGua BPU heterogeneous model."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Parameter Type"}),(0,i.jsx)(n.th,{children:"Definition Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"more"}),(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"(Optional parameter, default is False) If you need to use this interface for multiple inferences after this inference is completed, you can set this parameter to True."})]})})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"inf.forward()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"get_output",children:"get_output"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"The get_output function is a member function of the Infer object, generally used after the Infer object completes the forward function to obtain the inference results."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"inf.get_output()\n"})}),"\n",(0,i.jsx)(n.p,{children:"The inference results are numpy arrays, and the two outputs can be obtained as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"classes_scores = inf.outputs[0].data\nbboxes = inf.outputs[1].data\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"Returns whether the Infer object can successfully obtain the model's inference results"})]})})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);