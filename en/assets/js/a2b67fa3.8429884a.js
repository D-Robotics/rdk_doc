"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[14893],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(96540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}},53281:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Robot_development/tros_dev/breakpad","title":"5.5.3 Using Breakpad","description":"Background","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/05_Robot_development/05_tros_dev/breakpad.md","sourceDirName":"05_Robot_development/05_tros_dev","slug":"/Robot_development/tros_dev/breakpad","permalink":"/rdk_doc/en/Robot_development/tros_dev/breakpad","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1755487535000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"5.5.2 Model Inference","permalink":"/rdk_doc/en/Robot_development/tros_dev/ai_predict"},"next":{"title":"5.5.4 Performance Flame Graph","permalink":"/rdk_doc/en/Robot_development/tros_dev/flame_graph"}}');var r=t(74848),o=t(28453);const s={sidebar_position:3},i="5.5.3 Using Breakpad",d={},c=[{value:"Background",id:"background",level:2},{value:"Preparation",id:"preparation",level:2},{value:"Usage",id:"usage",level:2},{value:"1. Creating, compiling, and running the test program",id:"1-creating-compiling-and-running-the-test-program",level:3},{value:"2. Generate dump file using breakpad",id:"2-generate-dump-file-using-breakpad",level:3},{value:"3. Analysis",id:"3-analysis",level:3},{value:"Summary",id:"summary",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"553-using-breakpad",children:"5.5.3 Using Breakpad"})}),"\n",(0,r.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,r.jsx)(n.p,{children:'Breakpad is a tool suite for recording crash information in applications, which is more powerful than the Linux core mechanism. It can be used to view crash information of applications that have been stripped of compiler debugging information. When a program crashes, the crash information is recorded in a compact "minidump" file and sent back to the server. It can generate C and C++ stack traces from these minidumps and symbol files. Breakpad is located in the tools folder of TogetheROS.Bot.'}),"\n",(0,r.jsx)(n.h2,{id:"preparation",children:"Preparation"}),"\n",(0,r.jsxs)(n.p,{children:["Breakpad is located in the code repository  (",(0,r.jsx)(n.a,{href:"https://github.com/D-Robotics/breakpad.git",children:"https://github.com/D-Robotics/breakpad.git"}),"), with the develop branch. The directory contains the bin, lib, includes, and other folders that have been cross-compiled and can run on the RDK, which include the breakpad tools, static libraries, header files, and other contents."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"1-creating-compiling-and-running-the-test-program",children:"1. Creating, compiling, and running the test program"}),"\n",(0,r.jsx)(n.p,{children:"Create a new test program named test.cpp in the Breakpad directory and compile it into an executable program named test, making sure to include the -g option. Create a new directory /tmp, and then run the executable program test."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c++",children:'//  test.cpp\n\n//  Include the core Breakpad header file\n#include "client/linux/handler/exception_handler.h"\n\n//  Callback function when a crash occurs\nstatic bool dumpCallback(const google_breakpad::MinidumpDescriptor& descriptor,\n                          void* context, bool succeeded) {\n  printf("Dump path: %s\\n", descriptor.path());\n  return succeeded;\n}\n\n//  Crash function\nvoid crash() { volatile int* a = (int*)(nullptr); *a = 1; }\n\nint main(int argc, char* argv[]) {\n  //  Initialize the descriptor and set the coredump file path to /tmp\n  google_breakpad::MinidumpDescriptor descriptor("/tmp");\n  google_breakpad::ExceptionHandler eh(descriptor, NULL, dumpCallback, NULL,\n                                        true, -1);\n  crash();\n  return 0;\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"root@ubuntu:~/cc_ws/tros_ws/src/tools/breakpad# g++ ./test.cpp -o test -g \\\n  -I ./include/breakpad/ \\\n  -L ./lib/ \\\n  -lbreakpad -lbreakpad_client -lpthreadroot@ubuntu:~/cc_ws/tros_ws/src/tools/breakpad# mkdir /tmp\nroot@ubuntu:~/cc_ws/tros_ws/src/tools/breakpad# ./test\nDump path: /tmp/4113ab89-7169-49df-963945b3-383e8364.dmp\nSegmentation fault\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-generate-dump-file-using-breakpad",children:"2. Generate dump file using breakpad"}),"\n",(0,r.jsx)(n.p,{children:'Give execute permission to the program, and use the dump_syms tool to dump the symbols information of the executable program "test" to a file named "test.sym".'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"root@ubuntu:~/cc_ws/tros_ws/src/tools/breakpad# chmod +x ./bin/*\nroot@ubuntu:~/cc_ws/tros_ws/src/tools/breakpad# ./bin/dump_syms ./test > test.sym\n"})}),"\n",(0,r.jsx)(n.p,{children:"View the first line of the test.sym file and create the related folders."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"root@ubuntu:~/cc_ws/tros_ws/src/tools/breakpad# head -n1 test.sym\nMODULE Linux arm64 3816BF7138E87673BEE70E2C86F5FAC80 test\nroot@ubuntu:~/cc_ws/tros_ws/src/tools/breakpad# mkdir -p ./symbols/test/3816BF7138E87673BEE70E2C86F5FAC80 \nroot@ubuntu:~/cc_ws/tros_ws/src/tools/breakpad# cp test.sym ./symbols/test/3816BF7138E87673BEE70E2C86F5FAC80 \n"})}),"\n",(0,r.jsx)(n.p,{children:'Run the executable program "test" to generate a minidump.dmp file. Run the following command to get the program\'s stack trace information. Note that the .dmp filename may be different. Here, we use the dmp file generated in the first step.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"root@ubuntu:~/cc_ws/tros_ws/src/tools/breakpad# ./bin/minidump_stackwalk /tmp/4113ab89-7169-49df-963945b3-383e8364.dmp ./symbols\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-analysis",children:"3. Analysis"}),"\n",(0,r.jsx)(n.p,{children:"The output of the command in the previous step is shown below, which indicates that the program crashes at line 11 of test.cpp, which is expected."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Thread 0 (crashed)\n  0  test!crash() [test.cpp : 11 + 0x8]\n      x0 = 0x0000000000000000    x1 = 0x0000000000000001\n      x2 = 0x0000000000000000    x3 = 0x0000000000000001\n      x4 = 0x0000005571754448    x5 = 0x0000005571754458\n      x6 = 0x000000000000017f    x7 = 0x0000000000000000\n      x8 = 0x0000000000000010    x9 = 0x0000000000000000\n    x10 = 0x0000000000000000   x11 = 0x0000000000000000\n    x12 = 0x0000007fb68d6e48   x13 = 0x0000000000000000\n    x14 = 0x0000000000000000   x15 = 0x0000000000000020\n    x16 = 0x0000005571753df8   x17 = 0x0000007fb6c5a418\n    x18 = 0x0000000000000000   x19 = 0x00000055717333d0\n    x20 = 0x0000000000000000   x21 = 0x0000005571710470\n    x22 = 0x0000000000000000   x23 = 0x0000000000000000\n    x24 = 0x0000000000000000   x25 = 0x0000000000000000\n```x26 = 0x0000000000000000\nx27 = 0x0000000000000000\nx28 = 0x0000000000000000\nfp = 0x0000007ffb82b550\nlr = 0x0000005571710668\nsp = 0x0000007ffb82b540\npc = 0x00000055717105c4\nFound by: given as instruction pointer in context\n1 test!main [test.cpp : 18 + 0x0]\nx19 = 0x00000055717333d0\nx20 = 0x0000000000000000\nx21 = 0x0000005571710470\nx22 = 0x0000000000000000\nx23 = 0x0000000000000000\nx24 = 0x0000000000000000\nx25 = 0x0000000000000000\nx26 = 0x0000000000000000\nx27 = 0x0000000000000000\nx28 = 0x0000000000000000\nfp = 0x0000007ffb82b550\nsp = 0x0000007ffb82b550\npc = 0x0000005571710668\nFound by: call frame info\n2 libc.so.6 + 0x20d4c\nx19 = 0x00000055717333d0\nx20 = 0x0000000000000000\nx21 = 0x0000005571710470\nx22 = 0x0000000000000000\nx23 = 0x0000000000000000\nx24 = 0x0000000000000000\nx25 = 0x0000000000000000\nx26 = 0x0000000000000000\nx27 = 0x0000000000000000\nx28 = 0x0000000000000000\nfp = 0x0000007ffb82b700\nsp = 0x0000007ffb82b700\npc = 0x0000007fb68f3d50\nFound by: call frame info\n"})}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.p,{children:["This chapter introduces how to use the breakpad framework to generate crash files and analyze stack information. The application initializes the breakpad by specifying the directory generated by the dump file and registering a callback function for crashes. Use the dump_syms tool of breakpad again to generate a symbol file and create a symbol directory. Finally, use the minidump_stackwalk tool to parse the dump file and analyze the stack information.\nFor more detailed information, please refer to the official website of Breakpad: ",(0,r.jsx)(n.a,{href:"https://chromium.googlesource.com/breakpad/breakpad/",children:"https://chromium.googlesource.com/breakpad/breakpad/"})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);