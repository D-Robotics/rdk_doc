"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[81387],{28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>d});var t=r(96540);const i={},s=t.createContext(i);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}},59463:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/object_camera","title":"Camera Object","description":"The Camera object is used for image capture and processing functions for MIPI Cameras. It includes methods such as opencam, openvps, getframe, sendframe, and close. Detailed descriptions are provided below:","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/03_Basic_Application/04_multi_media/multi_media_api/pydev_multimedia_api_ultra/object_camera.md","sourceDirName":"03_Basic_Application/04_multi_media/multi_media_api/pydev_multimedia_api_ultra","slug":"/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/object_camera","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/object_camera","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1751966781000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"4.6 RDK Ultra \u591a\u5a92\u4f53\u63a5\u53e3\u8bf4\u660e","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/"},"next":{"title":"object_encoder","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/object_encoder"}}');var i=r(74848),s=r(28453);const c={sidebar_position:1},d="Camera Object",a={},l=[{value:"open_cam",id:"open_cam",level:2},{value:"open_vps",id:"open_vps",level:2},{value:"get_frame",id:"get_frame",level:2},{value:"send_frame",id:"send_frame",level:2},{value:"close",id:"close",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"camera-object",children:"Camera Object"})}),"\n",(0,i.jsxs)(n.p,{children:["The Camera object is used for image capture and processing functions for MIPI Cameras. It includes methods such as ",(0,i.jsx)(n.code,{children:"open_cam"}),", ",(0,i.jsx)(n.code,{children:"open_vps"}),", ",(0,i.jsx)(n.code,{children:"get_frame"}),", ",(0,i.jsx)(n.code,{children:"send_frame"}),", and ",(0,i.jsx)(n.code,{children:"close"}),". Detailed descriptions are provided below:"]}),"\n",(0,i.jsx)(n.h2,{id:"open_cam",children:"open_cam"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"Opens the specified channel of the MIPI camera and sets the camera output frame rate and resolution format."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Camera.open_cam(video_index, [width, height])\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Value Range"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"video_index"}),(0,i.jsx)(n.td,{children:"The host number corresponding to the camera. -1 indicates auto-detection. The number can be found in the /etc/board_config.json configuration file."}),(0,i.jsx)(n.td,{children:"-1, 0, 1, 2, 3"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"fps"}),(0,i.jsx)(n.td,{children:"Camera output frame rate."}),(0,i.jsx)(n.td,{children:"Depends on the camera model, default value is 30"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"width"}),(0,i.jsx)(n.td,{children:"The final output width of the camera image."}),(0,i.jsx)(n.td,{children:"Depends on the camera model, default value is 1920 (2560 for GC4663)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"height"}),(0,i.jsx)(n.td,{children:"The final output height of the camera image."}),(0,i.jsx)(n.td,{children:"Depends on the camera model, default value is 1080 (1440 for GC4663)"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#create camera object\ncamera = libsrcampy.Camera()\n\n#open MIPI Camera, fps: 30, solution: 1080p\nret = camera.open_cam(-1,  [1920, 1080])\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Return Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"Success"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"-1"}),(0,i.jsx)(n.td,{children:"Failure"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsxs)(n.p,{children:["The resolution output supports a 2D ",(0,i.jsx)(n.code,{children:"list"})," type input, which enables multiple different resolution outputs for the camera. The ",(0,i.jsx)(n.code,{children:"list"})," supports a maximum of 4 downscaled resolutions and 1 upscaled resolution, with the scaling range being between ",(0,i.jsx)(n.code,{children:"1/8~1.5"})," times the original camera resolution. Usage example is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"ret = cam.open_cam(0, -1, 30, [[1920, 1080], [1280, 720]])\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Example Code\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h2,{id:"open_vps",children:"open_vps"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"Enables the VPS (Video Processing) functionality for the specified camera channel. This supports image operations such as scaling, rotation, and cropping."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Camera.open_vps([src_width, src_height], [dst_width, dst_height], crop_rect, rotate)\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Range"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"src_width"}),(0,i.jsx)(n.td,{children:"Input image width"}),(0,i.jsx)(n.td,{children:"Depends on the camera output width"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"src_height"}),(0,i.jsx)(n.td,{children:"Input image height"}),(0,i.jsx)(n.td,{children:"Depends on the camera output height"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"dst_width"}),(0,i.jsx)(n.td,{children:"Output image width"}),(0,i.jsx)(n.td,{children:"1/8 to 1.5 times the input width"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"dst_height"}),(0,i.jsx)(n.td,{children:"Output image height"}),(0,i.jsx)(n.td,{children:"1/8 to 1.5 times the input height"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"crop_rect"}),(0,i.jsx)(n.td,{children:"Crop area width and height, input format [x, y]"}),(0,i.jsx)(n.td,{children:"Should not exceed the input image dimensions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"rotate"}),(0,i.jsx)(n.td,{children:"Rotation angle, supports up to two channel rotations"}),(0,i.jsxs)(n.td,{children:["Range 0-3, representing ",(0,i.jsx)(n.code,{children:"No rotation"}),", ",(0,i.jsx)(n.code,{children:"90 degrees"}),", ",(0,i.jsx)(n.code,{children:"180 degrees"}),", ",(0,i.jsx)(n.code,{children:"270 degrees"})]})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#create camera object\ncamera = libsrcampy.Camera()\n\n#enable vps function\nret = camera.open_vps([1920, 1080],[ 512, 512])\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Return Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"Success"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"-1"}),(0,i.jsx)(n.td,{children:"Failure"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Image cropping is performed starting from the top-left corner of the image, based on the configured dimensions."}),"\n",(0,i.jsxs)(n.li,{children:["Cropping is done before scaling or rotation. Multiple channels are configured by passing a ",(0,i.jsx)(n.code,{children:"list"})," of parameters."]}),"\n"]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h2,{id:"get_frame",children:"get_frame"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsxs)(n.p,{children:["Retrieve the image output of the camera object. This function should be called after ",(0,i.jsx)(n.code,{children:"open_cam"})," and ",(0,i.jsx)(n.code,{children:"open_vps"}),"."]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Camera.get_frame(module, [width, height])\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Range"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"module"}),(0,i.jsx)(n.td,{children:"The module from which to get the image"}),(0,i.jsx)(n.td,{children:"Default is 2"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"width"}),(0,i.jsx)(n.td,{children:"The width of the image to retrieve"}),(0,i.jsxs)(n.td,{children:["Output width set by ",(0,i.jsx)(n.code,{children:"open_cam"})," or ",(0,i.jsx)(n.code,{children:"open_vps"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"height"}),(0,i.jsx)(n.td,{children:"The height of the image to retrieve"}),(0,i.jsxs)(n.td,{children:["Output height set by ",(0,i.jsx)(n.code,{children:"open_cam"})," or ",(0,i.jsx)(n.code,{children:"open_vps"})]})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"cam = libsrcampy.Camera()\n\n#create camera object\ncamera = libsrcampy.Camera()\n\n#enable vps function\nret = camera.open_vps([1920, 1080],[ 512, 512])\n\n#get one image from camera\nimg = cam.get_frame(2,[512,512])\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Return Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"Success"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"-1"}),(0,i.jsx)(n.td,{children:"Failure"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsxs)(n.p,{children:["This method must be called after ",(0,i.jsx)(n.code,{children:"open_cam"})," and ",(0,i.jsx)(n.code,{children:"open_vps"}),"."]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import sys, os, time\n\nfrom hobot_spdev import libsppydev as srcampy\n\ndef test_camera():\n    cam = srcampy.Camera()\n\n    #open MIPI camera, fps: 30, solution: 1080p\n    ret = cam.open_cam(-1, [1920, 1080])\n    print("Camera open_cam return:%d" % ret)\n\n    # wait for 1s\n    time.sleep(1)\n\n    #get one image from camera   \n    img = cam.get_frame(2,1920, 1080)\n    if img is not None:\n        #save file\n        fo = open("output.img", "wb")\n        fo.write(img)\n        fo.close()\n        print("camera save img file success")\n    else:\n        print("camera save img file failed")\n    \n    #close MIPI camera\n    cam.close()\n    print("test_camera done!!!")\n\ntest_camera()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"send_frame",children:"send_frame"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsxs)(n.p,{children:["Input an image to the ",(0,i.jsx)(n.code,{children:"vps"})," module and trigger the image processing operation."]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Camera.send_frame(img)\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Range"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"img"}),(0,i.jsx)(n.td,{children:"Image data to be processed"}),(0,i.jsx)(n.td,{children:"Should match vps input size"})]})})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'camera = libsrcampy.Camera()\n\n#enable vps function, input: 1080p, output: 512x512\nret = camera.open_vps( [1920, 1080], [512, 512])\nprint("Camera vps return:%d" % ret)\n\nfin = open("output.img", "rb")\nimg = fin.read()\nfin.close()\n\n#send image to vps module\nret = vps.send_frame(img)\n'})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Return Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"Success"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"-1"}),(0,i.jsx)(n.td,{children:"Failure"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsxs)(n.p,{children:["This interface needs to be called after ",(0,i.jsx)(n.code,{children:"open_vps"}),"."]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import sys, os, time\n\nimport numpy as np\nimport cv2\nfrom hobot_spdev import libsppydev as srcampy\n\ndef test_camera_vps():\n    vps = srcampy.Camera()\n\n    #enable vps function, input: 1080p, output: 512x512\n    ret = vps.open_vps( [1920, 1080], [512, 512])\n    print("Camera vps return:%d" % ret)\n\n    fin = open("output.img", "rb")\n    img = fin.read()\n    fin.close()\n\n    #send image data to vps\n    ret = vps.send_frame(img)\n    print ("Process send_frame return:%d" % ret)\n\n    fo = open("output_vps.img", "wb+")\n\n    #get image data from vps\n    img = vps.get_frame()\n    if img is not None:\n        fo.write(img)\n        print("encode write image success")\n    else:\n        print("encode write image failed")\n    fo.close()\n\n    #close vps function\n    vps.close()\n    print("test_camera_vps done!!!")\n\ntest_camera_vps():\n'})}),"\n",(0,i.jsx)(n.h2,{id:"close",children:"close"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"Close the enabled MIPI camera."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Camera.close()\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'cam = libsrcampy.Camera()\n\n#open MIPI camera, fps: 30, solution: 1080p\nret = cam.open_cam(-1,[1920, 1080])\nprint("Camera open_cam return:%d" % ret)\n\n#close MIPI camera\ncam.close()\n'})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);