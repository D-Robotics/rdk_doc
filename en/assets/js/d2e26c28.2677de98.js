"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[2691],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},78867:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Algorithm_Application/pydev_dnn_demo/pydev_dnn_api","title":"4.1.6 Model Inference Interface Description","description":"Overview","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/04_Algorithm_Application/01_pydev_dnn_demo/pydev_dnn_api.md","sourceDirName":"04_Algorithm_Application/01_pydev_dnn_demo","slug":"/Algorithm_Application/pydev_dnn_demo/pydev_dnn_api","permalink":"/rdk_doc/en/Algorithm_Application/pydev_dnn_demo/pydev_dnn_api","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1750258914000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"4.1.5 MIPI Camera-based Inference","permalink":"/rdk_doc/en/Algorithm_Application/pydev_dnn_demo/mipi_camera"},"next":{"title":"Model Inference Interface Instructions","permalink":"/rdk_doc/en/Algorithm_Application/cdev_dnn_api/cdev_dnn_api"}}');var i=t(74848),s=t(28453);const o={sidebar_position:6},d="4.1.6 Model Inference Interface Description",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Model Object",id:"model",level:2},{value:"inputs",id:"inputs",level:3},{value:"Example Code",id:"example-code",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"416-model-inference-interface-description",children:"4.1.6 Model Inference Interface Description"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The development board Ubuntu system comes pre-installed with the Python version of the pyeasy_dnn model inference module. By loading the model and creating a Model object, functions such as model inference and data parsing can be completed."}),"\n",(0,i.jsx)(n.p,{children:"The module inference process can be divided into three steps: loading the model, image inference, and data parsing. The code example is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from hobot_dnn import pyeasy_dnn as dnn\n\n#create model object\nmodels = model.load('./model.bin')\n\n#do inference with image\noutputs = models[0].forward(image)\n\nfor item in outputs:\n    output_array.append(item.buffer)\npost_process(output_array)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"model",children:"Model Object"}),"\n",(0,i.jsx)(n.p,{children:"The Model object is created when the model is loaded. It contains members and methods such as inputs, outputs, and forward, detailed as follows:"}),"\n",(0,i.jsx)(n.h3,{id:"inputs",children:"inputs"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"Returns the tensor input information of the model. Specific input can be specified by index, for example: inputs[0] represents the 0th input."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Model.inputs(tuple(pyDNNTensor))\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Definition Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"index"}),(0,i.jsx)(n.td,{children:"Represents the index of the input tensor"})]})})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage Method\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def print_properties(pro):\n    print("tensor type:", pro.tensor_type)\n    print("data type:", pro.dtype)\n    print("layout:", pro.layout)\n    print("shape:", pro.shape)\n\nmodels = dnn.load(\'../models/fcos_512x512_nv12.bin\')\ninput = models[0].inputs[0]\n\nprint_properties(input.properties)\n'})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsx)(n.p,{children:"Returns an object of type pyDNNTensor, detailed as follows:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"properties"}),(0,i.jsx)(n.td,{children:"Represents the properties of the tensor"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"buffer"}),(0,i.jsx)(n.td,{children:"Represents the data in the tensor, in numpy format"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"name"}),(0,i.jsx)(n.td,{children:"Represents the name in the tensor"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsxs)(n.p,{children:["outputs\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"})]}),"\n",(0,i.jsx)(n.p,{children:"Returns the tensor output information of the model. Specific output can be specified by index, for example: outputs[0] represents the 0th output."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Model.outputs(tuple(pyDNNTensor))\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Definition Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"index"}),(0,i.jsx)(n.td,{children:"Represents the index of the output tensor"})]})})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage Method\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def print_properties(pro):\n    print("tensor type:", pro.tensor_type)\n    print("data type:", pro.dtype)\n    print("layout:", pro.layout)\n    print("shape:", pro.shape)\n\nmodels = dnn.load(\'../models/fcos_512x512_nv12.bin\')\noutput = models[0].outputs[0]\n\nprint_properties(output.properties)\n'})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsx)(n.p,{children:"Returns an object of type pyDNNTensor, detailed as follows:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"properties"}),(0,i.jsx)(n.td,{children:"Represents the properties of the tensor"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"buffer"}),(0,i.jsx)(n.td,{children:"Represents the data in the tensor, in numpy format"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"name"}),(0,i.jsx)(n.td,{children:"Represents the name in the tensor"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsxs)(n.p,{children:["forward\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"})]}),"\n",(0,i.jsx)(n.p,{children:"Performs model inference based on the specified input."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Model.forward(args &args, kwargs &kwargs)\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Definition Description"}),(0,i.jsx)(n.th,{children:"Value Range"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"args"}),(0,i.jsx)(n.td,{children:"Input data for inference"}),(0,i.jsx)(n.td,{children:"numpy: single model input, list[numpy, numpy, ...]: multiple model inputs"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"kwargs"}),(0,i.jsx)(n.td,{children:"core_id, represents the core id for model inference"}),(0,i.jsx)(n.td,{children:"0: automatic allocation, 1: core0, 2: core1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"kwargs"}),(0,i.jsx)(n.td,{children:"priority, represents the priority of the current model inference task"}),(0,i.jsx)(n.td,{children:"Value range 0~255, the larger the number, the higher the priority"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"args\nkwargs\nkwargs"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage Method\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"img = cam.get_img(2, 512, 512)\n\nimg = np.frombuffer(img, dtype=np.uint8)\noutputs = models[0].forward(img)\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsx)(n.p,{children:"Returns an outputs object."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h2,{id:"example-code",children:"Example Code"}),"\n",(0,i.jsxs)(n.p,{children:["You can view the ",(0,i.jsx)(n.a,{href:"./pydev_dnn_demo",children:"Model Inference Example "}),"  section for more details."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);