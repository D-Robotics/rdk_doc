"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[83534],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var t=i(96540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}},84207:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Advanced_development/linux_development/driver_development_x5/driver_gpio_dev","title":"GPIO Debugging Guide","description":"The X5 chip has a total of 308 I/O pins, with 129 pins that can be configured to work in GPIO mode. However, it\'s important to be aware of the multiplexing relationships with other function pins.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/07_Advanced_development/02_linux_development/driver_development_x5/driver_gpio_dev.md","sourceDirName":"07_Advanced_development/02_linux_development/driver_development_x5","slug":"/Advanced_development/linux_development/driver_development_x5/driver_gpio_dev","permalink":"/rdk_doc/en/Advanced_development/linux_development/driver_development_x5/driver_gpio_dev","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1751852619000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"LCD Driver Debugging Guide","permalink":"/rdk_doc/en/Advanced_development/linux_development/driver_development_x5/driver_lcd"},"next":{"title":"Pinctrl Debugging Guide","permalink":"/rdk_doc/en/Advanced_development/linux_development/driver_development_x5/driver_pinctrl_dev"}}');var o=i(74848),r=i(28453);const s={sidebar_position:4},d="GPIO Debugging Guide",l={},a=[{value:"Pin Query",id:"pin-query",level:2},{value:"Example",id:"example",level:3},{value:"Driver Code",id:"driver-code",level:2},{value:"Kernel Configuration",id:"kernel-configuration",level:3},{value:"Kernel DTS Configuration",id:"kernel-dts-configuration",level:3},{value:"GPIO Usage",id:"gpio-usage",level:2},{value:"Kernel Space",id:"kernel-space",level:3},{value:"DTS Configuration",id:"dts-configuration",level:4},{value:"Driver Code Interface",id:"driver-code-interface",level:4},{value:"X5 GPIO IRQ",id:"x5-gpio-irq",level:4},{value:"User Space",id:"user-space",level:3},{value:"Control Interface",id:"control-interface",level:4},{value:"API Usage",id:"api-usage",level:4},{value:"Example Usage",id:"example-usage",level:4},{value:"Debugging Interface",id:"debugging-interface",level:4},{value:"Linux GPIO Number to Chip Pin Mapping",id:"linux-gpio-number-to-chip-pin-mapping",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"gpio-debugging-guide",children:"GPIO Debugging Guide"})}),"\n",(0,o.jsx)(n.p,{children:"The X5 chip has a total of 308 I/O pins, with 129 pins that can be configured to work in GPIO mode. However, it's important to be aware of the multiplexing relationships with other function pins."}),"\n",(0,o.jsx)(n.h2,{id:"pin-query",children:"Pin Query"}),"\n",(0,o.jsxs)(n.p,{children:["You can query the multiplexing and configuration of I/O pins, including their default power-on states, multiplexing, drive capability, pull-up/pull-down, Schmitt trigger configuration, and corresponding GPIO register information in the ",(0,o.jsx)(n.a,{href:"https://archive.d-robotics.cc/downloads/datasheets/",children:"datasheets"})," under the file ",(0,o.jsx)(n.strong,{children:"X5 PIN SW Reg-V1.1.xlsx"}),' (referred to as "the table" below).']}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["Here is an example of querying the multiplexing, direction control, and data register address for the pin ",(0,o.jsx)(n.code,{children:"LSIO_UART3_RXD"}),":"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Function Multiplexing Register Description:"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Open the table and select the ",(0,o.jsx)(n.code,{children:"PIN Mux List"})," sheet."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Column B contains the ",(0,o.jsx)(n.code,{children:"PinName"}),", where you can find the row for ",(0,o.jsx)(n.code,{children:"LSIO_UART3_RXD"}),". Column F shows the default function as ",(0,o.jsx)(n.code,{children:"LSIO_GPIO0_PIN10"}),", which indicates the function is GPIO and the GPIO name is ",(0,o.jsx)(n.code,{children:"LSIO_GPIO0_PIN10"}),". Columns I, K, M, and O describe the corresponding functions, as shown in the image below:\n",(0,o.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/07_Advanced_development/02_linux_development/driver_development_x5/LSIO_UART3_RXD_func.png",alt:"image-LSIO_UART3_RXD_func"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["To configure the pin function, select the ",(0,o.jsx)(n.code,{children:"LSIO PIN Control Register"})," sheet, as shown below:\n",(0,o.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/07_Advanced_development/02_linux_development/driver_development_x5/LSIO_UART3_RXD_mux.png",alt:"image-LSIO_UART3_RXD_mux"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The first row of the table records the base address of the register, which is ",(0,o.jsx)(n.code,{children:"0x34180000"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Column A records the offsets of various registers."}),"\n",(0,o.jsx)(n.li,{children:"Column G describes the functions of the registers."}),"\n",(0,o.jsxs)(n.li,{children:['Find the row for "',(0,o.jsx)(n.code,{children:"lsio_uart3_rxd PIN mux selector"}),'" in column G to locate the register offset for ',(0,o.jsx)(n.code,{children:"LSIO_UART3_RXD"}),"'s PIN mux register as ",(0,o.jsx)(n.code,{children:"0x84"}),". The complete address can be calculated as ",(0,o.jsx)(n.code,{children:"Base Address + Offset = 0x34180000 + 0x84 = 0x34180084"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["After finding the configuration item, you can set the corresponding PIN function. For example, writing ",(0,o.jsx)(n.code,{children:"bit20-21 = 0x0"})," in register ",(0,o.jsx)(n.code,{children:"0x34180084"})," configures ",(0,o.jsx)(n.code,{children:"LSIO_UART3_RXD"})," as ",(0,o.jsx)(n.code,{children:"uart3 rx"})," (Function 0). Writing ",(0,o.jsx)(n.code,{children:"0x1"})," configures it as ",(0,o.jsx)(n.code,{children:"i2c5 scl"})," (Function 1), and ",(0,o.jsx)(n.code,{children:"0x2"})," configures it as ",(0,o.jsx)(n.code,{children:"GPIO"})," (Function 2)."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["To configure the PIN attributes, select the ",(0,o.jsx)(n.code,{children:"LSIO PIN Control Register"})," sheet as shown below:\n",(0,o.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/07_Advanced_development/02_linux_development/driver_development_x5/LSIO_UART3_RXD_IO_ctr_no_ms.png",alt:"image-LSIO_UART3_RXD_IO_ctr_no_ms"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The first row records the base address, which is ",(0,o.jsx)(n.code,{children:"0x34180000"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Column A records the offsets of various registers."}),"\n",(0,o.jsx)(n.li,{children:"Column G describes the functions of the registers."}),"\n",(0,o.jsxs)(n.li,{children:['Find the row for "',(0,o.jsx)(n.code,{children:"lsio_uart3_rxd pull up enable"}),'" in column G, which shows the register offset for PU/PD/Schmitt trigger control as ',(0,o.jsx)(n.code,{children:"0x3C"}),". The complete address is ",(0,o.jsx)(n.code,{children:"0x34180000 + 0x3C = 0x3418003C"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["PIN drive strength values can be found in the ",(0,o.jsx)(n.code,{children:"Description for GPIO App"})," table in the datasheet."]}),"\n",(0,o.jsxs)(n.li,{children:["To find the power domain of the PIN, search for ",(0,o.jsx)(n.code,{children:"mode select"})," and confirm that the corresponding register controls the ",(0,o.jsx)(n.code,{children:"LSIO_UART3_RXD"})," pin. The register offset for controlling the power domain is ",(0,o.jsx)(n.code,{children:"0x38"}),", and the complete address is ",(0,o.jsx)(n.code,{children:"0x34180000 + 0x38 = 0x34180038"}),", as shown below:\n",(0,o.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/07_Advanced_development/02_linux_development/driver_development_x5/LSIO_UART3_RXD_IO_ctr_ms.png",alt:"image-LSIO_UART3_RXD_IO_ctr_ms"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"When configuring registers, it is recommended to first read the current value, modify the necessary register bits, and then write it back."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"GPIO Control and Data Registers:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The tables ",(0,o.jsx)(n.code,{children:"DW_apb_gpio8_mem_map_v1.0"})," and ",(0,o.jsx)(n.code,{children:"DW_apb_gpio32_mem_map_v1.0"})," describe the GPIO direction registers and value registers for the pins, as shown in the image below (from ",(0,o.jsx)(n.code,{children:"DW_apb_gpio32_mem_map_v1.0"}),"):\n",(0,o.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/07_Advanced_development/02_linux_development/driver_development_x5/LSIO_UART3_RXD_gpio_reg.png",alt:"image-LSIO_UART3_RXD_gpio_reg"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["For example, the ",(0,o.jsx)(n.code,{children:"LSIO_UART3_RXD"})," pin corresponds to GPIO ",(0,o.jsx)(n.code,{children:"LSIO_GPIO0_PIN10"}),". In the above image, the base address of the ",(0,o.jsx)(n.code,{children:"LSIO_GPIO0"})," controller is ",(0,o.jsx)(n.code,{children:"0x34120000"}),". Therefore, the data register address is ",(0,o.jsx)(n.code,{children:"0x34120000"})," and the direction register address is ",(0,o.jsx)(n.code,{children:"0x34120004"}),". The bit offset for the pin ",(0,o.jsx)(n.code,{children:"LSIO_UART3_RXD"})," is 10, corresponding to GPIO number ",(0,o.jsx)(n.code,{children:"LSIO_GPIO0_PIN10"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"driver-code",children:"Driver Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kernel/drivers/gpio/gpio-dwapb.c # gpio\u9a71\u52a8\u6e90\u6587\u4ef6\n"})}),"\n",(0,o.jsx)(n.h3,{id:"kernel-configuration",children:"Kernel Configuration"}),"\n",(0,o.jsx)(n.p,{children:"GPIO_DWAPB"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/07_Advanced_development/02_linux_development/driver_development_x5/GPIO_MENUCONFIG.png",alt:"image-GPIO_MENUCONFIG"})}),"\n",(0,o.jsx)(n.h3,{id:"kernel-dts-configuration",children:"Kernel DTS Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["The device tree definition for X5 GPIO controllers is located in the SDK package under the ",(0,o.jsx)(n.code,{children:"arch/arm64/boot/dts/hobot/x5.dtsi"})," file."]}),"\n",(0,o.jsx)(n.admonition,{title:"Note",type:"info",children:(0,o.jsxs)(n.p,{children:["The nodes in ",(0,o.jsx)(n.code,{children:"x5.dtsi"})," mainly declare SoC-specific features and are not board-specific, so generally, they do not require modification."]})}),"\n",(0,o.jsx)(n.h2,{id:"gpio-usage",children:"GPIO Usage"}),"\n",(0,o.jsx)(n.h3,{id:"kernel-space",children:"Kernel Space"}),"\n",(0,o.jsx)(n.h4,{id:"dts-configuration",children:"DTS Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["All GPIO configurations for X5 pins are located in the SDK package under the ",(0,o.jsx)(n.code,{children:"arch/arm64/boot/dts/hobot/pinmux-gpio.dtsi"})," file.\nIf you need to configure specific pins for GPIO functionality, you can directly reference the predefined GPIO configurations."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'/* arch/arm64/boot/dts/hobot/hobot/x5-som.dtsi */\n\n&extcon_usb2otg {\n\tpinctrl-names = "default";\n\tpinctrl-0 = <&aon_gpio_6>;\n\n\tid-gpios = <&aon_gpio_porta 6 GPIO_ACTIVE_HIGH>;\n\n\tstatus = "okay";\n};\n'})}),"\n",(0,o.jsx)(n.h4,{id:"driver-code-interface",children:"Driver Code Interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:"/* include/linux/gpio.h */\n/* Request GPIO */\nint gpio_request(unsigned gpio, const char *label);\n/* Initialize GPIO as output and set output level */\nint gpio_direction_output(unsigned gpio, int value);\n/* Initialize GPIO as input */\nint gpio_direction_input(unsigned gpio);\n/* Get the value of the GPIO pin */\nint gpio_get_value(unsigned int gpio);\n/* Set the value of the GPIO pin */\nvoid gpio_set_value(unsigned int gpio, int value);\n/* Release the GPIO pin */\nvoid gpio_free(unsigned gpio);\n/* Request a GPIO interrupt; the returned value can be passed to request_irq and free_irq */\nint gpio_to_irq(unsigned int gpio);\n"})}),"\n",(0,o.jsx)(n.h4,{id:"x5-gpio-irq",children:"X5 GPIO IRQ"}),"\n",(0,o.jsx)(n.p,{children:"The X5 chip has a total of 129 GPIO pins, all of which can be configured for interrupt functionality."}),"\n",(0,o.jsxs)(n.admonition,{title:"Note",type:"info",children:[(0,o.jsx)(n.p,{children:"The X5 GPIO controller supports interrupt triggers on rising edge, falling edge, high level, or low level. Each GPIO configured as an interrupt can have its trigger condition independently set."}),(0,o.jsxs)(n.p,{children:["X5 GPIO interfaces in Kernel Space adhere to standard Linux interfaces. For more details on usage, refer to ",(0,o.jsx)(n.code,{children:"Documentation/driver-api/gpio/consumer.rst"}),"."]})]}),"\n",(0,o.jsx)(n.h3,{id:"user-space",children:"User Space"}),"\n",(0,o.jsx)(n.h4,{id:"control-interface",children:"Control Interface"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)("font",{color:"red",children:"Note:"}),' In the Linux-V6.1 baseline used by X5, the GPIO sysfs interface has been marked as "Obsolete." For more details, refer to the Linux documentation.']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"/sys/class/gpio/export  # The user space can export the control of a GPIO to the user space by writing the GPIO number to this file, e.g., `echo 356 > export`\n/sys/class/gpio/unexport  # The opposite of `export`, used to unexport a GPIO from user space\n/sys/class/gpio/gpiochip0  # GPIO controller\n\n"})}),"\n",(0,o.jsx)(n.h4,{id:"api-usage",children:"API Usage"}),"\n",(0,o.jsxs)(n.p,{children:["After exporting the GPIO control using ",(0,o.jsx)(n.code,{children:"export"}),", a path like ",(0,o.jsx)(n.code,{children:"/sys/class/gpio/gpio356/"})," will be created. This path contains the following attributes:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"direction"}),': Specifies the GPIO port direction. It can be read as "in" or "out", and written as either "in" or "out" to set it as input or output.']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"value"}),": Represents the GPIO level. 0 indicates low level, and 1 indicates high level. If the GPIO is configured as an output, the ",(0,o.jsx)(n.code,{children:"value"})," can be written to change the state."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"edge"}),': Specifies the interrupt trigger type. It can have one of four values: "none", "rising", "falling", or "both".',"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:'"none" means the GPIO is not an interrupt pin.'}),"\n",(0,o.jsx)(n.li,{children:'"rising" means the pin triggers an interrupt on the rising edge.'}),"\n",(0,o.jsx)(n.li,{children:'"falling" means the pin triggers an interrupt on the falling edge.'}),"\n",(0,o.jsx)(n.li,{children:'"both" means the pin triggers an interrupt on either edge.'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"example-usage",children:"Example Usage"}),"\n",(0,o.jsx)(n.p,{children:"The following example demonstrates exporting the LSIO_UART3_RXD pin, setting it to output mode, outputting a high level, and then unexporting it."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"echo 356 > /sys/class/gpio/export\necho out > /sys/class/gpio/gpio356/direction\necho 1 > /sys/class/gpio/gpio356/value\n# echo 0 > /sys/class/gpio/gpio356/value\necho 356 > /sys/class/gpio/unexport\n"})}),"\n",(0,o.jsx)(n.h4,{id:"debugging-interface",children:"Debugging Interface"}),"\n",(0,o.jsxs)(n.p,{children:["If the ",(0,o.jsx)(n.code,{children:"CONFIG_DEBUG_FS"})," option is enabled in the kernel configuration and the ",(0,o.jsx)(n.code,{children:"debugfs"})," filesystem is mounted, the kernel provides a GPIO debugging interface via debugfs."]}),"\n",(0,o.jsxs)(n.p,{children:["First, check whether ",(0,o.jsx)(n.code,{children:"debugfs"})," is mounted. If the following command outputs anything, it indicates that ",(0,o.jsx)(n.code,{children:"debugfs"})," is currently mounted:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"mount | grep debugfs\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If the output is empty, execute the following command to mount ",(0,o.jsx)(n.code,{children:"debugfs"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"mount -t debugfs none /sys/kernel/debug\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Once ",(0,o.jsx)(n.code,{children:"debugfs"})," is successfully mounted, you can view the list of GPIO allocations through the following node:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# cat /sys/kernel/debug/gpio\ngpiochip9: GPIOs 347-378, parent: platform/34130000.gpio, 34130000.gpio:\n gpio-352 (                    |enable              ) out lo\n\ngpiochip8: GPIOs 379-410, parent: platform/34120000.gpio, 34120000.gpio:\n gpio-410 (                    |phyreset            ) out hi\n\ngpiochip7: GPIOs 411-433, parent: platform/32150000.gpio, 32150000.gpio:\n\ngpiochip6: GPIOs 434-465, parent: platform/35070000.gpio, 35070000.gpio:\n gpio-435 (                    |voltage             ) out hi ACTIVE LOW\n\ngpiochip5: GPIOs 466-497, parent: platform/35060000.gpio, 35060000.gpio:\n gpio-492 (                    |power               ) out hi\n\ngpiochip4: GPIOs 498-505, parent: platform/31000000.gpio, 31000000.gpio:\n gpio-500 (                    |GPIO Key Power      ) in  hi IRQ ACTIVE LOW\n gpio-503 (                    |id                  ) in  hi IRQ\n gpio-504 (                    |id                  ) in  hi IRQ\n\ngpiochip3: GPIOs 506-507, parent: platform/34180000.lsio_iomuxc, 34180000.lsio_iomuxc:\n\ngpiochip2: GPIOs 508-508, parent: platform/31040014.dsp_iomuxc, 31040014.dsp_iomuxc:\n\ngpiochip1: GPIOs 509-510, parent: platform/35050000.hsio_iomuxc, 35050000.hsio_iomuxc:\n\ngpiochip0: GPIOs 511-511, parent: platform/31040000.aon_iomuxc, 31040000.aon_iomuxc:\n#\n"})}),"\n",(0,o.jsxs)(n.admonition,{title:"Note",type:"info",children:[(0,o.jsx)(n.p,{children:"The output above is just an example; the actual output depends on the board's specific DTS configuration."}),(0,o.jsxs)(n.p,{children:["X5 GPIOs in User Space follow the standard Linux GPIO interfaces. For more usage methods, refer to ",(0,o.jsx)(n.code,{children:"Documentation/gpio/sysfs.txt"}),"."]})]}),"\n",(0,o.jsx)(n.h2,{id:"linux-gpio-number-to-chip-pin-mapping",children:"Linux GPIO Number to Chip Pin Mapping"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)("font",{color:"red",children:"Note:"})," The GPIO numbers in Linux are purely a software concept and may change depending on software configurations. There is no physical binding between the GPIO numbers and the chip's pin numbers."]}),"\n",(0,o.jsxs)(n.p,{children:["It is recommended to use the ",(0,o.jsx)("font",{color:"red",children:"hb_gpioinfo tool"})," to check the mapping of PinName, PinNum, and PinFunc on the current development board."]}),"\n",(0,o.jsxs)(n.p,{children:["If the ",(0,o.jsx)(n.code,{children:"hb_gpioinfo"})," tool is not available on the board, you can update ",(0,o.jsx)(n.code,{children:"hobot-io"})," via ",(0,o.jsx)(n.code,{children:"apt"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"hb_gpioinfo Usage Example:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"PinName"}),": Refers to the pin name on the SoC, which is consistent with the pin naming in the X5 SoC schematic."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"PinNum"}),": Refers to the actual GPIO number corresponding to the X5 chip's pin."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"PinFunc"}),": Refers to the pin's multiplexing function that has been used in the X5 device tree. When checking ",(0,o.jsx)(n.code,{children:"PinFunc"}),", note that if it shows ",(0,o.jsx)(n.code,{children:"Default"}),", it means that the device tree has not assigned that function to the pin. In this case, you should check what the default functionality of the pin is in the pinlist."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"gpiochip0 - 8 lines: @31000000.gpio: @498-505\n        [Number]                [Mode]  [Status]  [GpioName]       [PinName]          [PinNum]   [PinFunc]\n        line  0:        unnamed input                             AON_GPIO_PIN0         498      Default\n        line  1:        unnamed input                             AON_GPIO_PIN1         499      Default\n        line  2:        unnamed input  active-low  GPIO Key Power AON_GPIO_PIN2         500      aon_gpio_2\n        line  3:        unnamed input              interrupt      AON_GPIO_PIN3         501      Default\n        line  4:        unnamed input                             AON_GPIO_PIN4         502      Default\n        line  5:        unnamed input              id             AON_ENV_VDD           503      aon_gpio_5\n        line  6:        unnamed input              id             AON_ENV_CNN0          504      aon_gpio_6\n        line  7:        unnamed input                             AON_ENV_CNN1          505      aon_gpio_7\ngpiochip1 - 31 lines: @35060000.gpio: @466-496\n        [Number]                [Mode]  [Status]  [GpioName]       [PinName]          [PinNum]   [PinFunc]\n        line  0:        unnamed input                             HSIO_ENET_MDC         466      enetgrp\n        line  1:        unnamed input                             HSIO_ENET_MDIO        467      enetgrp\n        line  2:        unnamed input                             HSIO_ENET_TXD_0       468      enetgrp\n        line  3:        unnamed input                             HSIO_ENET_TXD_1       469      enetgrp\n        line  4:        unnamed input                             HSIO_ENET_TXD_2       470      enetgrp\n        line  5:        unnamed input                             HSIO_ENET_TXD_3       471      enetgrp\n        line  6:        unnamed input                             HSIO_ENET_TXEN        472      enetgrp\n        line  7:        unnamed input                             HSIO_ENET_TX_CLK      473      enetgrp\n        line  8:        unnamed input                             HSIO_ENET_RX_CLK      474      enetgrp\n        line  9:        unnamed input                             HSIO_ENET_RXD_0       475      enetgrp\n        line 10:        unnamed input                             HSIO_ENET_RXD_1       476      enetgrp\n        line 11:        unnamed input                             HSIO_ENET_RXD_2       477      enetgrp\n        line 12:        unnamed input                             HSIO_ENET_RXD_3       478      enetgrp\n        line 13:        unnamed input                             HSIO_ENET_RXDV        479      enetgrp\n        line 14:        unnamed input                             HSIO_ENET_PHY_CLK     480      enetgrp\n        line 15:        unnamed input                             HSIO_SD_WP            481      sdgrp \n        line 16:        unnamed input                             HSIO_SD_XLK           482      sdgrp \n        line 17:        unnamed input                             HSIO_SD_CMD           483      sdgrp \n        line 18:        unnamed input                             HSIO_SD_CDN           484      sdgrp \n        line 19:        unnamed input                             HSIO_SD_DATA0         485      sdgrp \n        line 20:        unnamed input                             HSIO_SD_DATA1         486      sdgrp \n        line 21:        unnamed input                             HSIO_SD_DATA2         487      sdgrp \n        line 22:        unnamed input                             HSIO_SD_DATA3         488      sdgrp \n        line 23:        unnamed output             phyreset       HSIO_SDIO_WP          489      hsio_gpio0_23\n        line 24:        unnamed input                             HSIO_SDIO_XLK         490      sdiogrp\n        line 25:        unnamed input                             HSIO_SDIO_CMD         491      sdiogrp\n        line 26:        unnamed output             power          HSIO_SDIO_CDN         492      hsio_gpio0_26\n        line 27:        unnamed input                             HSIO_SDIO_DATA0       493      sdiogrp\n        line 28:        unnamed input                             HSIO_SDIO_DATA1       494      sdiogrp\n        line 29:        unnamed input                             HSIO_SDIO_DATA2       495      sdiogrp\n        line 30:        unnamed input                             HSIO_SDIO_DATA3       496      sdiogrp\ngpiochip2 - 18 lines: @35070000.gpio: @434-451\n        [Number]                [Mode]  [Status]  [GpioName]       [PinName]          [PinNum]   [PinFunc]\n        line  0:        unnamed input                             HSIO_QSPI_SSN0        434      qspigrp\n        line  1:        unnamed output active-low  voltage        HSIO_QSPI_SSN1        435      hsio_gpio1_1\n        line  2:        unnamed input                             HSIO_QSPI_SCLK        436      qspigrp\n        line  3:        unnamed input                             HSIO_QSPI_DATA0       437      qspigrp\n        line  4:        unnamed input                             HSIO_QSPI_DATA1       438      qspigrp\n        line  5:        unnamed input                             HSIO_QSPI_DATA2       439      qspigrp\n        line  6:        unnamed input                             HSIO_QSPI_DATA3       440      qspigrp\n        line  7:        unnamed input                             HSIO_EMMC_CLK         441      Default\n        line  8:        unnamed input                             HSIO_EMMC_CMD         442      Default\n        line  9:        unnamed input                             HSIO_EMMC_DATA0       443      Default\n        line 10:        unnamed input                             HSIO_EMMC_DATA1       444      Default\n        line 11:        unnamed input                             HSIO_EMMC_DATA2       445      Default\n        line 12:        unnamed input                             HSIO_EMMC_DATA3       446      Default\n        line 13:        unnamed input                             HSIO_EMMC_DATA4       447      Default\n        line 14:        unnamed input                             HSIO_EMMC_DATA5       448      Default\n        line 15:        unnamed input                             HSIO_EMMC_DATA6       449      Default\n        line 16:        unnamed input                             HSIO_EMMC_DATA7       450      Default\n        line 17:        unnamed input                             HSIO_EMMC_RSTN        451      Default\ngpiochip3 - 23 lines: @32150000.gpio: @411-433\n        [Number]                [Mode]  [Status]  [GpioName]       [PinName]          [PinNum]   [PinFunc]\n        line  0:        unnamed input                             DSP_I2C7_SCL          411      dsp_i2c7grp\n        line  1:        unnamed input                             DSP_I2C7_SDA          412      dsp_i2c7grp\n        line  2:        unnamed input                             DSP_UART0_RXD         413      uart0grp\n        line  3:        unnamed input                             DSP_UART0_TXD         414      uart0grp\n        line  4:        unnamed input                             DSP_I2S0_MCLK         415      i2s0grp\n        line  5:        unnamed input                             DSP_I2S0_SCLK         416      i2s0grp\n        line  6:        unnamed input                             DSP_I2S0_WS           417      i2s0grp\n        line  7:        unnamed input                             DSP_I2S0_DI           418      i2s0grp\n        line  8:        unnamed input                             DSP_I2S0_DO           419      i2s0grp\n        line  9:        unnamed input                             DSP_I2S1_MCLK         420      Default\n        line 10:        unnamed input                             DSP_I2S1_SCLK         421      Default\n        line 11:        unnamed input                             DSP_I2S1_WS           422      Default\n        line 12:        unnamed input                             DSP_I2S1_DI           423      Default\n        line 13:        unnamed input                             DSP_I2S1_DO           424      Default\n        line 14:        unnamed output active-low  ACT            DSP_PDM_CKO           425      32150000.gpio:425\n        line 15:        unnamed input                             DSP_PDM_IN0           426      dsp_gpio0_15\n        line 16:        unnamed input                             DSP_PDM_IN1           427      dsp_gpio0_16\n        line 17:        unnamed output                            DSP_PDM_IN2           428      dsp_gpio0_17\n        line 18:        unnamed output                            DSP_PDM_IN3           429      dsp_gpio0_18\n        line 19:        unnamed input              interrupt      DSP_SPI6P_SCLK        430      dsp_gpio0_19\n        line 20:        unnamed output active-low  reset          DSP_SPI6_SSN          431      dsp_gpio0_20\n        line 21:        unnamed input              interrupt      DSP_SPI6_MISO         432      Default\n        line 22:        unnamed input                             DSP_SPI6_MOSI         433      Default\ngpiochip4 - 32 lines: @34120000.gpio: @379-410\n        [Number]                [Mode]  [Status]  [GpioName]       [PinName]          [PinNum]   [PinFunc]\n        line  0:        unnamed input                             LSIO_UART7_RX         379      Default\n        line  1:        unnamed input                             LSIO_UART7_TX         380      Default\n        line  2:        unnamed input                             LSIO_UART7_CTS        381      Default\n        line  3:        unnamed input                             LSIO_UART7_RTS        382      Default\n        line  4:        unnamed input                             LSIO_UART1_RX         383      uart1grp\n        line  5:        unnamed input                             LSIO_UART1_TX         384      uart1grp\n        line  6:        unnamed output                            LSIO_UART1_CTS        385      lsio_gpio0_6\n        line  7:        unnamed output             reset          LSIO_UART1_RTS        386      lsio_gpio0_7\n        line  8:        unnamed input                             LSIO_UART2_RX         387      Default\n        line  9:        unnamed input                             LSIO_UART2_TX         388      Default\n        line 10:        unnamed input                             LSIO_UART3_RX         389      i2c5grp\n        line 11:        unnamed input                             LSIO_UART3_TX         390      i2c5grp\n        line 12:        unnamed input                             LSIO_UART4_RX         391      lsio_gpio0_12\n        line 13:        unnamed output                            LSIO_UART4_TX         392      lsio_gpio0_13_rdk_v1p0\n        line 14:        unnamed input                             LSIO_SPI0_SCLK        393      Default\n        line 15:        unnamed input                             LSIO_SPI1_SSN_1       394      spi1_ssn1grp\n        line 16:        unnamed input                             LSIO_SPI1_SCLK        395      spi1grp\n        line 17:        unnamed input                             LSIO_SPI1_SSN         396      spi1grp\n        line 18:        unnamed input                             LSIO_SPI1_MISO        397      spi1grp\n        line 19:        unnamed input                             LSIO_SPI1_MOSI        398      spi1grp\n        line 20:        unnamed input                             LSIO_SPI2_SCLK        399      Default\n        line 21:        unnamed input                             LSIO_SPI2_SSN         400      Default\n        line 22:        unnamed input                             LSIO_SPI2_MISO        401      Default\n        line 23:        unnamed input                             LSIO_SPI2_MOSI        402      Default\n        line 24:        unnamed input                             LSIO_SPI3_SCLK        403      pinctrl_lpwm1_0\n        line 25:        unnamed input                             LSIO_SPI3_SSN         404      pinctrl_lpwm1_1\n        line 26:        unnamed input                             LSIO_SPI3_MISO        405      Default\n        line 27:        unnamed input                             LSIO_SPI3_MOSI        406      Default\n        line 28:        unnamed input                             LSIO_SPI4_SCLK        407      uart5grp\n        line 29:        unnamed input                             LSIO_SPI4_SSN         408      uart5grp\n        line 30:        unnamed input                             LSIO_SPI4_MISO        409      i2c6grp\n        line 31:        unnamed input                             LSIO_SPI4_MOSI        410      i2c6grp\ngpiochip5 - 17 lines: @34130000.gpio: @347-363\n        [Number]                [Mode]  [Status]  [GpioName]       [PinName]          [PinNum]   [PinFunc]\n        line  0:        unnamed input                             LSIO_SPI5_SCLK        347      spi5grp\n        line  1:        unnamed input                             LSIO_SPI5_SSN         348      spi5grp\n        line  2:        unnamed input                             LSIO_SPI5_MISO        349      spi5grp\n        line  3:        unnamed input                             LSIO_SPI5_MOSI        350      spi5grp\n        line  4:        unnamed input                             LSIO_SPI0_SSN         351      lsio_gpio1_4\n        line  5:        unnamed output             enable         LSIO_SPI0_MISO        352      lsio_gpio1_5\n        line  6:        unnamed input                             LSIO_SPI0_MOSI        353      lsio_gpio1_6\n        line  7:        unnamed input                             LSIO_I2C0_SCL         354      i2c0grp\n        line  8:        unnamed input                             LSIO_I2C0_SDA         355      i2c0grp\n        line  9:        unnamed input                             LSIO_I2C1_SCL         356      pinctrl_pwm3_0\n        line 10:        unnamed input                             LSIO_I2C1_SDA         357      pinctrl_pwm3_1\n        line 11:        unnamed input                             LSIO_I2C2_SCL         358      i2c2grp\n        line 12:        unnamed input                             LSIO_I2C2_SDA         359      i2c2grp\n        line 13:        unnamed input                             LSIO_I2C3_SCL         360      i2c3grp\n        line 14:        unnamed input                             LSIO_I2C3_SDA         361      i2c3grp\n        line 15:        unnamed input                             LSIO_I2C4_SCL         362      i2c4grp\n        line 16:        unnamed input                             LSIO_I2C4_SDA         363      i2c4grp\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);