"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[25727],{23050:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Algorithm_Application/pydev_dnn_demo/static_image","title":"4.1.3 Static Image Inference","description":"Image Classification Algorithm - Mobilenet v1","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/04_Algorithm_Application/01_pydev_dnn_demo/static_image.md","sourceDirName":"04_Algorithm_Application/01_pydev_dnn_demo","slug":"/Algorithm_Application/pydev_dnn_demo/static_image","permalink":"/rdk_doc/en/Algorithm_Application/pydev_dnn_demo/static_image","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1750765996000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"4.1.2 Importing the Model Inference Library","permalink":"/rdk_doc/en/Algorithm_Application/pydev_dnn_demo/model_import"},"next":{"title":"4.1.4 Inference Based on USB Camera","permalink":"/rdk_doc/en/Algorithm_Application/pydev_dnn_demo/usb_camera"}}');var o=t(74848),s=t(28453);const l={sidebar_position:3},d="4.1.3 Static Image Inference",r={},a=[{value:"Image Classification Algorithm - Mobilenet v1",id:"image-classification-algorithm---mobilenet-v1",level:2},{value:"Running Method",id:"running-method",level:3},{value:"Explanation of Example Code",id:"explanation-of-example-code",level:3},{value:"Object Detection Algorithm - YOLOv3",id:"object-detection-algorithm---yolov3",level:2},{value:"How to Run",id:"how-to-run",level:3},{value:"Object Detection Algorithm - YOLOv5",id:"detection_yolov5",level:2},{value:"How to Run",id:"how-to-run-1",level:3},{value:"Image Segmentation Algorithm - UNet",id:"image-segmentation-algorithm---unet",level:2},{value:"Running Method",id:"running-method-1",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"413-static-image-inference",children:"4.1.3 Static Image Inference"})}),"\n",(0,o.jsx)(n.h2,{id:"image-classification-algorithm---mobilenet-v1",children:"Image Classification Algorithm - Mobilenet v1"}),"\n",(0,o.jsx)(n.p,{children:"This example mainly implements the following functions:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Load the ",(0,o.jsx)(n.code,{children:"mobilenet v1"})," image classification model"]}),"\n",(0,o.jsxs)(n.li,{children:["Read the static image ",(0,o.jsx)(n.code,{children:"zebra_cls.jpg"})," as the input of the model"]}),"\n",(0,o.jsx)(n.li,{children:"Parse the model output to obtain the classification result of the image"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"running-method",children:"Running Method"}),"\n",(0,o.jsxs)(n.p,{children:["The complete code and test data of this example are installed in the ",(0,o.jsx)(n.code,{children:"/app/pydev_demo/01_basic_sample/"})," directory. Call the following command to run:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"cd /app/pydev_demo/01_basic_sample/\nsudo python3 ./test_mobilenetv1.py\n"})}),"\n",(0,o.jsx)(n.p,{children:"After successfully running, the classification result of the image will be output as shown below:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"========== Classification result ==========\ncls id: 340 Confidence: 0.991851\n"})}),"\n",(0,o.jsx)(n.h3,{id:"explanation-of-example-code",children:"Explanation of Example Code"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Importing algorithm inference libraries hobot_dnn, numpy, and opencv modules"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from hobot_dnn import pyeasy_dnn as dnn\nimport numpy as np\nimport cv2\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Model loading\nCall the ",(0,o.jsx)(n.a,{href:"/rdk_doc/en/Algorithm_Application/pydev_dnn_demo/pydev_dnn_api",children:"load"})," interface to load the model file and return a list of ",(0,o.jsx)(n.code,{children:"hobot_dnn.pyeasy_dnn.Model"})," class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"models = dnn.load('../models/mobilenetv1_224x224_nv12.bin')\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, the input of the ",(0,o.jsx)(n.code,{children:"mobilenetv1"})," model is ",(0,o.jsx)(n.code,{children:"1x3x224x224"})," data with the format ",(0,o.jsx)(n.code,{children:"NCHW"}),". The output is a list of 1000 data, representing the confidence of 1000 categories. The example defines the ",(0,o.jsx)(n.code,{children:"print_properties"})," function to output the input and output parameters of the model:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# print properties of input tensor\nprint_properties(models[0].inputs[0].properties)\n# print properties of output tensor\nprint_properties(models[0].outputs[0].properties)\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Data preprocessing"}),"\n",(0,o.jsxs)(n.p,{children:["Example opens the image file ",(0,o.jsx)(n.code,{children:"zebra_cls.jpg"})," containing a zebra, and resizes the image to fit the input size of the model (244 x 224):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# open image\nimg_file = cv2.imread('./zebra_cls.jpg')\n# get the input tensor size\nh, w = models[0].inputs[0].properties.shape[2], models[0].inputs[0].properties.shape[3]\nprint(\"input tensor size: %d x %d\" % (h, w))\ndes_dim = (w, h)\n# resize image to input size\nresized_data = cv2.resize(img_file, des_dim, interpolation=cv2.INTER_AREA)\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/04_Algorithm_Application/01_pydev_dnn_demo/image/pydev_dnn_demo/zebra_cls.jpg",alt:"zebra_cls"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, convert the image from BGR format to NV12 format, which is compatible with the model input, using the ",(0,o.jsx)(n.code,{children:"bgr2nv12_opencv"})," function:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"nv12_data = bgr2nv12_opencv(resized_data)\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Model inference"}),"\n",(0,o.jsxs)(n.p,{children:["Call the ",(0,o.jsx)(n.code,{children:"forward"})," interface of the ",(0,o.jsx)(n.a,{href:"./pydev_dnn_api",children:"Model"})," class for algorithm inference, and then obtain a list of 1000 values representing the predicted probabilities for 1000 categories."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"outputs = models[0].forward(nv12_data)\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Algorithm post-processing"}),"\n",(0,o.jsx)(n.p,{children:"The output of the algorithm model needs to be post-processed to obtain the desired class, detection box, and other information. In this example, the model output corresponds to 1000 categories, so it needs to be filtered based on confidence to obtain the correct result."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'print("=" * 10, "Classification result", "=" * 10)\nnp.argmax(outputs[0].buffer)\n# output target id and confidence\nprint("cls id: %d Confidence: %f" % (np.argmax(outputs[0].buffer), outputs[0].buffer[0][np.argmax(outputs[0].buffer)]))\n'})}),"\n",(0,o.jsx)(n.p,{children:"The correct result when running is:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"========== Classification result ==========\ncls id: 340 Confidence: 0.991851\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"object-detection-algorithm---yolov3",children:"Object Detection Algorithm - YOLOv3"}),"\n",(0,o.jsx)(n.p,{children:"This example mainly implements the following functions:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Load the ",(0,o.jsx)(n.code,{children:"yolov3_416x416_nv12"})," object detection model."]}),"\n",(0,o.jsxs)(n.li,{children:["Read the static image ",(0,o.jsx)(n.code,{children:"kite.jpg"})," as the input of the model."]}),"\n",(0,o.jsx)(n.li,{children:"Analyze the algorithm result and render the detection results."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"how-to-run",children:"How to Run"}),"\n",(0,o.jsxs)(n.p,{children:["The complete code and test data of this example are installed in the directory ",(0,o.jsx)(n.code,{children:"/app/pydev_demo/06_yolov3_sample/"}),". Run the following command to execute:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"cd /app/pydev_demo/06_yolov3_sample/\nsudo python3 ./test_yolov3.py\n"})}),"\n",(0,o.jsxs)(n.p,{children:["After successful execution, it will output the object detection results and save the rendered results to the file ",(0,o.jsx)(n.code,{children:"result.jpg"}),", as shown in the following figure:\n",(0,o.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/04_Algorithm_Application/01_pydev_dnn_demo/image/pydev_dnn_demo/image-20220624105321684.png",alt:"image-20220624105321684"})]}),"\n",(0,o.jsx)(n.h2,{id:"detection_yolov5",children:"Object Detection Algorithm - YOLOv5"}),"\n",(0,o.jsx)(n.p,{children:"This example mainly implements the following functions:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Load the ",(0,o.jsx)(n.code,{children:"yolov5s_672x672_nv12"})," object detection model."]}),"\n",(0,o.jsxs)(n.li,{children:["Read the static image ",(0,o.jsx)(n.code,{children:"kite.jpg"})," as the input of the model."]}),"\n",(0,o.jsx)(n.li,{children:"Analyze the algorithm result and render the detection results."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"how-to-run-1",children:"How to Run"}),"\n",(0,o.jsxs)(n.p,{children:["The complete code and test data of this example are installed in the directory ",(0,o.jsx)(n.code,{children:"/app/pydev_demo/07_yolov5_sample/"}),". Run the following command to execute:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"cd /app/pydev_demo/07_yolov5_sample/\nsudo python3 ./test_yolov5.py\n"})}),"\n",(0,o.jsxs)(n.p,{children:["After successful execution, it will output the object detection results and save the rendered results to the file ",(0,o.jsx)(n.code,{children:"result.jpg"}),", as shown in the following figure:\n",(0,o.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/04_Algorithm_Application/01_pydev_dnn_demo/image/pydev_dnn_demo/image-20220624105432872.png",alt:"image-20220624105432872"})]}),"\n",(0,o.jsx)(n.h2,{id:"image-segmentation-algorithm---unet",children:"Image Segmentation Algorithm - UNet"}),"\n",(0,o.jsx)(n.p,{children:"This example mainly implements the following functions:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Loading the ",(0,o.jsx)(n.code,{children:"mobilenet_unet_1024x2048_nv12"})," image segmentation model (pre-trained segmentation model for cityscapes)."]}),"\n",(0,o.jsxs)(n.li,{children:["Reading the ",(0,o.jsx)(n.code,{children:"segmentation.png"})," static image as the input of the model."]}),"\n",(0,o.jsx)(n.li,{children:"Analyzing the algorithm results and rendering the segmentation results."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"running-method-1",children:"Running Method"}),"\n",(0,o.jsxs)(n.p,{children:["The complete code and test data of this example are installed in the ",(0,o.jsx)(n.code,{children:"/app/pydev_demo/04_segment_sample/"})," directory. Use the following command to run:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"cd /app/pydev_demo/04_segment_sample/\nsudo python3 ./test_mobilenet_unet.py\n"})}),"\n",(0,o.jsxs)(n.p,{children:["After successful execution, the segmentation results of the image will be output, and the segmentation effect image will be output to the ",(0,o.jsx)(n.code,{children:"segment_result.png"})," file, as shown in the following image:\n",(0,o.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/04_Algorithm_Application/01_pydev_dnn_demo/image/pydev_dnn_demo/image-20220624105144784.png",alt:"image-20220624105144784"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var i=t(96540);const o={},s=i.createContext(o);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);