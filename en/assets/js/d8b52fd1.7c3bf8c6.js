"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[22577],{28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>c});var t=i(96540);const s={},r=t.createContext(s);function d(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(r.Provider,{value:n},e.children)}},46237:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Basic_Application/multi_media/multi_media_api/cdev_multimedia_api_x3/encoder_api","title":"ENCODER (Encoder Module) API","description":"The ENCODER API provides the following interfaces:","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/03_Basic_Application/04_multi_media/multi_media_api/cdev_multimedia_api_x3/encoder_api.md","sourceDirName":"03_Basic_Application/04_multi_media/multi_media_api/cdev_multimedia_api_x3","slug":"/Basic_Application/multi_media/multi_media_api/cdev_multimedia_api_x3/encoder_api","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/cdev_multimedia_api_x3/encoder_api","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1753320593000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"VIO(Camera Input) API","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/cdev_multimedia_api_x3/vio_api"},"next":{"title":"DECODER API","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/cdev_multimedia_api_x3/decoder_api"}}');var s=i(74848),r=i(28453);const d={sidebar_position:2},c="ENCODER (Encoder Module) API",o={},l=[{value:"sp_init_encoder_module",id:"sp_init_encoder_module",level:2},{value:"sp_release_encoder_module",id:"sp_release_encoder_module",level:2},{value:"sp_start_encode",id:"sp_start_encode",level:2},{value:"sp_stop_encode",id:"sp_stop_encode",level:2},{value:"sp_encoder_set_frame",id:"sp_encoder_set_frame",level:2},{value:"sp_encoder_get_stream",id:"sp_encoder_get_stream",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"encoder-encoder-module-api",children:"ENCODER (Encoder Module) API"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ENCODER"})," API provides the following interfaces:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Function"}),(0,s.jsx)(n.th,{children:"Function Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"sp_init_encoder_module"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Initialize encoder module object"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"sp_release_encoder_module"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Destroy encoder module object"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"sp_start_encode"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Create image encoding channel"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"sp_stop_encode"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Close image encoding channel"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"sp_encoder_set_frame"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Pass image frames to encoding channel"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"sp_encoder_get_stream"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Get encoded stream from encoding channel"})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"sp_init_encoder_module",children:"sp_init_encoder_module"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Prototype]"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void *sp_init_encoder_module()"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Description]"})}),"\n",(0,s.jsx)(n.p,{children:"Initialize the encoder module object. This function needs to be called to obtain a handle when using the encoder module."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Parameters]"})}),"\n",(0,s.jsx)(n.p,{children:"None"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Return Type]"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns a pointer to the ",(0,s.jsx)(n.code,{children:"ENCODER"})," object on success, ",(0,s.jsx)(n.code,{children:"NULL"})," on failure."]}),"\n",(0,s.jsx)(n.h2,{id:"sp_release_encoder_module",children:"sp_release_encoder_module"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Prototype]"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void sp_release_encoder_module(void *obj)"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Description]"})}),"\n",(0,s.jsx)(n.p,{children:"Destroy the encoder module object."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Parameters]"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"obj"}),": Pointer to the object obtained when initializing the interface."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Return Type]"})}),"\n",(0,s.jsx)(n.p,{children:"None"}),"\n",(0,s.jsx)(n.h2,{id:"sp_start_encode",children:"sp_start_encode"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Prototype]"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"int32_t sp_start_encode(void *obj, int32_t chn, int32_t type, int32_t width, int32_t height, int32_t bits)"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Description]"})}),"\n",(0,s.jsxs)(n.p,{children:["Create an image encoding channel, supports up to 32 channels, and supports encoding types of ",(0,s.jsx)(n.code,{children:"H264"}),", ",(0,s.jsx)(n.code,{children:"H265"}),", and ",(0,s.jsx)(n.code,{children:"MJPEG"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Parameters]"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"obj"}),": Pointer to the initialized ",(0,s.jsx)(n.code,{children:"ENCODER"})," object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"chn"}),": Channel number to create, supports 0 ~ 31"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"type"}),": Image encoding type, supports ",(0,s.jsx)(n.code,{children:"SP_ENCODER_H264"}),", ",(0,s.jsx)(n.code,{children:"SP_ENCODER_H265"}),", and ",(0,s.jsx)(n.code,{children:"SP_ENCODER_MJPEG"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"width"}),": Width of the image data resolution to be input to the encoding channel"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"height"}),": Height of the image data resolution to be input to the encoding channel"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bits"}),": Encoding bitrate, commonly used values are 512, 1024, 2048, 4096, 8192, 16384, etc. (unit: Mbps), other values are also possible. The higher the bitrate, the clearer the encoded image, the smaller the compression ratio, and the larger the stream data."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Return Type]"})}),"\n",(0,s.jsx)(n.p,{children:"Returns 0 on success, -1 on failure"}),"\n",(0,s.jsx)(n.h2,{id:"sp_stop_encode",children:"sp_stop_encode"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Prototype]"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"int32_t sp_stop_encode(void *obj)"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Description]"})}),"\n",(0,s.jsx)(n.p,{children:"Close the opened encoding channel."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Parameters]"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"obj"}),": Pointer to the initialized ",(0,s.jsx)(n.code,{children:"ENCODER"})," object"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Return Type]"})}),"\n",(0,s.jsx)(n.p,{children:"Returns 0 on success, -1 on failure"}),"\n",(0,s.jsx)(n.h2,{id:"sp_encoder_set_frame",children:"sp_encoder_set_frame"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Prototype]"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"int32_t sp_encoder_set_frame(void *obj, char *frame_buffer, int32_t size)"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Description]"})}),"\n",(0,s.jsxs)(n.p,{children:["Pass the image frame data that needs to be encoded to the encoding channel, and the format must be ",(0,s.jsx)(n.code,{children:"NV12"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Parameters]"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"obj"}),": Initialized ",(0,s.jsx)(n.code,{children:"ENCODER"})," object pointer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"frame_buffer"}),": Image frame data to be encoded, must be in ",(0,s.jsx)(n.code,{children:"NV12"})," format, and the resolution must be consistent with the image frame resolution of the ",(0,s.jsx)(n.code,{children:"sp_start_encode"})," interface call."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"size"}),": Size of the image frame data, the calculation formula for the size of the ",(0,s.jsx)(n.code,{children:"NV12"})," format image is ",(0,s.jsx)(n.code,{children:"(width * height * 3) / 2"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Return Type]"})}),"\n",(0,s.jsx)(n.p,{children:"Returns 0 for success, -1 for failure."}),"\n",(0,s.jsx)(n.h2,{id:"sp_encoder_get_stream",children:"sp_encoder_get_stream"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Prototype]"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"int32_t sp_encoder_get_stream(void *obj, char *stream_buffer)"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Function Description]"})}),"\n",(0,s.jsx)(n.p,{children:"Get the encoded bitstream data from the encoding channel."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Parameters]"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"obj"}),": Initialized ",(0,s.jsx)(n.code,{children:"ENCODER"})," object pointer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stream_buffer"}),": After a successful call, the bitstream data will be stored in this buffer. The size of this buffer needs to be adjusted according to the encoding resolution and bitrate."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"[Return Type]"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the size of the bitstream data for success, -1 for failure."})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);