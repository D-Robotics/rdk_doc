"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[2242],{28453:(n,i,e)=>{e.d(i,{R:()=>s,x:()=>c});var o=e(96540);const r={},t=o.createContext(r);function s(n){const i=o.useContext(t);return o.useMemo(function(){return"function"==typeof n?n(i):{...i,...n}},[i,n])}function c(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),o.createElement(t.Provider,{value:i},n.children)}},71255:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Advanced_development/linux_development/driver_development_x5/driver_pinctrl_dev","title":"Pinctrl Debugging Guide","description":"The X5 Pinctrl is driven by custom-developed Pinctrl code, primarily configured through the DTS (Device Tree Source) to enable Pinctrl functionality.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/07_Advanced_development/02_linux_development/driver_development_x5/driver_pinctrl_dev.md","sourceDirName":"07_Advanced_development/02_linux_development/driver_development_x5","slug":"/Advanced_development/linux_development/driver_development_x5/driver_pinctrl_dev","permalink":"/rdk_doc/en/Advanced_development/linux_development/driver_development_x5/driver_pinctrl_dev","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1750765996000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"GPIO Debugging Guide","permalink":"/rdk_doc/en/Advanced_development/linux_development/driver_development_x5/driver_gpio_dev"},"next":{"title":"IO-DOMAIN Debugging Guide","permalink":"/rdk_doc/en/Advanced_development/linux_development/driver_development_x5/driver_io_domain_dev"}}');var r=e(74848),t=e(28453);const s={sidebar_position:5},c="Pinctrl Debugging Guide",l={},d=[{value:"Pin Query",id:"pin-query",level:2},{value:"Driver Code",id:"driver-code",level:3},{value:"Kernel Configuration",id:"kernel-configuration",level:3},{value:"Pinctrl DTS Configuration",id:"pinctrl-dts-configuration",level:3},{value:"Pinctrl Usage",id:"pinctrl-usage",level:2},{value:"Driver DTS Configuration",id:"driver-dts-configuration",level:3},{value:"Pin-mux Configuration",id:"pin-mux-configuration",level:3},{value:"Drive Strength Configuration",id:"drive-strength-configuration",level:3},{value:"Pull-up/Pull-down Configuration",id:"pull-uppull-down-configuration",level:3},{value:"Schmitt Trigger Configuration",id:"schmitt-trigger-configuration",level:3},{value:"Voltage Domain Configuration",id:"voltage-domain-configuration",level:3},{value:"Driver Example Code",id:"driver-example-code",level:3},{value:"User Space Debugging",id:"user-space-debugging",level:3}];function p(n){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"pinctrl-debugging-guide",children:"Pinctrl Debugging Guide"})}),"\n",(0,r.jsx)(i.p,{children:"The X5 Pinctrl is driven by custom-developed Pinctrl code, primarily configured through the DTS (Device Tree Source) to enable Pinctrl functionality."}),"\n",(0,r.jsx)(i.h2,{id:"pin-query",children:"Pin Query"}),"\n",(0,r.jsxs)(i.p,{children:["You can check the IO pin multiplexing and configuration, including the default state on power-up, pin multiplexing, drive strength, pull-up/pull-down, Schmitt trigger configuration, and the corresponding GPIO register information in the ",(0,r.jsx)(i.a,{href:"https://archive.d-robotics.cc/downloads/datasheets/",children:"datasheets"}),' by referring to the document "X5 PIN SW Reg-V1.1.xlsx".']}),"\n",(0,r.jsx)(i.h3,{id:"driver-code",children:"Driver Code"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-bash",children:"kernel/drivers/pinctrl/hobot/aon.c  # Pinctrl driver source file\nkernel/drivers/pinctrl/hobot/common.c  # Pinctrl driver source file\nkernel/drivers/pinctrl/hobot/display.c  # Pinctrl driver source file\nkernel/drivers/pinctrl/hobot/dsp.c  # Pinctrl driver source file\nkernel/drivers/pinctrl/hobot/hsio.c  # Pinctrl driver source file\nkernel/drivers/pinctrl/hobot/lsio.c # Pinctrl driver source file\nkernel/drivers/pinctrl/hobot/common.h  # Pinctrl driver header file\n"})}),"\n",(0,r.jsx)(i.h3,{id:"kernel-configuration",children:"Kernel Configuration"}),"\n",(0,r.jsxs)(i.p,{children:["To enable Pinctrl, ensure the ",(0,r.jsx)(i.code,{children:"CONFIG_PINCTRL_SINGLE"})," option is selected in the kernel configuration."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/07_Advanced_development/02_linux_development/driver_development_x5/pinctrl-kernel-menuconfig.png",alt:"Pinctrl Kernel Menuconfig"})}),"\n",(0,r.jsx)(i.h3,{id:"pinctrl-dts-configuration",children:"Pinctrl DTS Configuration"}),"\n",(0,r.jsxs)(i.p,{children:["The device tree definition for the X5 Pinctrl controller is located in the ",(0,r.jsx)(i.code,{children:"arch/arm64/boot/dts/hobot/x5.dtsi"})," file under the SDK package's kernel folder."]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)("font",{color:"red",children:"Note:"})," The nodes in ",(0,r.jsx)(i.code,{children:"x5.dtsi"})," mainly declare SoC-level features and are not specific to any particular circuit board. In general, these nodes do not need to be modified."]}),"\n",(0,r.jsx)(i.h2,{id:"pinctrl-usage",children:"Pinctrl Usage"}),"\n",(0,r.jsx)(i.h3,{id:"driver-dts-configuration",children:"Driver DTS Configuration"}),"\n",(0,r.jsxs)(i.p,{children:['Before using Pinctrl interfaces in the driver, the corresponding Pinctrl configuration group needs to be specified in the DTS. When the driver probes, it will configure the Pinctrl settings that correspond to the "default" group into the registers. Other configuration groups must be parsed from the code, and then switched to the appropriate group. For example, for ',(0,r.jsx)(i.code,{children:"uart2"}),":"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'/* arch/arm64/boot/dts/hobot/x5-evb.dts */\n&uart2 {\n\tstatus = "okay";\n\tpinctrl-names = "default";\n\tpinctrl-0 = <&pinctrl_uart2>;\n};\n'})}),"\n",(0,r.jsxs)(i.p,{children:["The configuration group referenced by ",(0,r.jsx)(i.code,{children:"uart2"})," Pinctrl is located in ",(0,r.jsx)(i.code,{children:"arch/arm64/boot/dts/hobot/pinmux-func.dtsi"}),", with the following content:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"/* arch/arm64/boot/dts/hobot/pinmux-func.dtsi */\n\tpinctrl_uart2: uart2grp {\n\t\thorizon,pins = <\n\t\t\tLSIO_UART2_RX  LSIO_PINMUX_3 BIT_OFFSET16  MUX_ALT0 &pconf_drv_pu_mid_3v3\n\t\t\tLSIO_UART2_TX  LSIO_PINMUX_3 BIT_OFFSET18  MUX_ALT0 &pconf_drv_pu_mid_3v3\n\t\t>;\n\t};\n};\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Additionally, GPIO functionality configuration is provided in ",(0,r.jsx)(i.code,{children:"arch/arm64/boot/dts/hobot/pinmux-gpio.dtsi"}),", with the following content:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"/* arch/arm64/boot/dts/hobot/pinmux-gpio.dtsi */\n\tlsio_gpio0_8: lsio_gpio0_8 {\n\t\thorizon,pins = <\n\t\t\tLSIO_UART2_RX\tLSIO_PINMUX_3 BIT_OFFSET16\tMUX_ALT2\t&pconf_input_en_3v3\n\t\t>;\n\t};\n\n\tlsio_gpio0_9: lsio_gpio0_9 {\n\t\thorizon,pins = <\n\t\t\tLSIO_UART2_TX\tLSIO_PINMUX_3 BIT_OFFSET18\tMUX_ALT2\t&pconf_input_en_3v3\n\t\t>;\n\t};\n"})}),"\n",(0,r.jsx)(i.p,{children:"The Pinctrl configuration group combines multiple pin configurations into a single set. Each pin's configuration contains five columns:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Pin ID"}),": The ID for the related domain's pin, defined in header files such as ",(0,r.jsx)(i.code,{children:"kernel/include/dt-bindings/pinctrl/horizon-*-pinfunc.h"}),"."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Pin Function Multiplexing Register"}),": The register for the pin's function multiplexing configuration."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Bit Offset"}),": The bit offset for the multiplexing configuration in the register."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Pin-mux Value"}),": The value representing the corresponding function for the pin."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Additional Configurations"}),": Includes settings for default power-up state, drive strength, pull-up/pull-down, Schmitt trigger configuration, and voltage domain."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"pin-mux-configuration",children:"Pin-mux Configuration"}),"\n",(0,r.jsxs)(i.p,{children:["Each pin on the X5 chip supports up to four functions. When configuring a particular function, you can refer to the ",(0,r.jsx)(i.code,{children:"X5 PIN SW Reg-V1.1.xlsx"})," document to check the corresponding Pin-mux value. For example, for pin LSIO_UART7_RX:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["When the Pin is configured with ",(0,r.jsx)(i.code,{children:"MUX_ALT0"}),", the function is ",(0,r.jsx)(i.code,{children:"uart rx"}),"."]}),"\n",(0,r.jsxs)(i.li,{children:["When the Pin is configured with ",(0,r.jsx)(i.code,{children:"MUX_ALT2"}),", the function is ",(0,r.jsx)(i.code,{children:"gpio"}),"."]}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"/* The macro defines the mux mode of horizon pinctrl */\n#define MUX_ALT0 0x0\n#define MUX_ALT1 0x1\n#define MUX_ALT2 0x2\n#define MUX_ALT3 0x3\n"})}),"\n",(0,r.jsx)(i.h3,{id:"drive-strength-configuration",children:"Drive Strength Configuration"}),"\n",(0,r.jsxs)(i.p,{children:["Each pin on the X5 chip supports configuring the maximum output current. The default configuration can be set in ",(0,r.jsx)(i.code,{children:"arch/arm64/boot/dts/hobot/pinmux-func.dtsi"}),", and this configuration is then referenced when configuring individual pins."]}),"\n",(0,r.jsxs)(i.p,{children:["X5 pins are categorized into two types: ",(0,r.jsx)(i.strong,{children:"GPIO type"})," and ",(0,r.jsx)(i.strong,{children:"SDIO type"}),". The same bit configuration represents different drive current levels depending on the pin type. For detailed information on the types and the drive current corresponding to the drive bits, please consult with Horizon Robotics support."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"pconf_drv_pu_mid_3v3: pconf-dev-pu-mid-3v3 {\n    bias-pull-up;\n    power-source = <HORIZON_IO_PAD_VOLTAGE_3V3>;\n    drive-strength = <7>;\n};\n"})}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)("font",{color:"red",children:"Note:"})," Configuring excessive drive strength may cause damage to the chip's pins! Please configure with caution!"]}),"\n",(0,r.jsx)(i.h3,{id:"pull-uppull-down-configuration",children:"Pull-up/Pull-down Configuration"}),"\n",(0,r.jsxs)(i.p,{children:["Each pin on the X5 chip also supports pull-up and pull-down configurations. The default settings can be specified in ",(0,r.jsx)(i.code,{children:"arch/arm64/boot/dts/hobot/pinmux-func.dtsi"}),", and these configurations are referenced when setting up individual pins."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"pconf_drv_pu_mid_3v3: pconf-dev-pu-mid-3v3 {\n    bias-pull-up;\n    power-source = <HORIZON_IO_PAD_VOLTAGE_3V3>;\n    drive-strength = <7>;\n};\n"})}),"\n",(0,r.jsx)(i.p,{children:"Supported Pull-up/Pull-down Configurations:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"bias-pull-up\nbias-disable\nbias-pull-down\n"})}),"\n",(0,r.jsx)(i.h3,{id:"schmitt-trigger-configuration",children:"Schmitt Trigger Configuration"}),"\n",(0,r.jsxs)(i.p,{children:["Each pin on the X5 chip also supports Schmitt trigger configuration. The default settings for the Schmitt trigger can be specified in the ",(0,r.jsx)(i.code,{children:"arch/arm64/boot/dts/hobot/pinmux-func.dtsi"})," file, and these configurations are applied when setting up individual pins."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"pconf_drv_pu_mid_3v3: pconf-dev-pu-mid-3v3 {\n    input-schmitt-enable\n    power-source = <HORIZON_IO_PAD_VOLTAGE_3V3>;\n    drive-strength = <7>;\n};\n"})}),"\n",(0,r.jsx)(i.h3,{id:"voltage-domain-configuration",children:"Voltage Domain Configuration"}),"\n",(0,r.jsxs)(i.p,{children:["Each pin on the X5 chip also supports voltage domain configuration, allowing for 1.8V and 3.3V voltage domains. The default configuration can be set in the ",(0,r.jsx)(i.code,{children:"arch/arm64/boot/dts/hobot/pinmux-func.dtsi"})," file, and these settings are referenced when configuring individual pins."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"#define  HORIZON_IO_PAD_VOLTAGE_3V3 0\n#define  HORIZON_IO_PAD_VOLTAGE_1V8 1\n\npconf_drv_pu_mid_3v3: pconf-dev-pu-mid-3v3 {\n    bias-pull-up;\n    power-source = <HORIZON_IO_PAD_VOLTAGE_3V3>;\n    drive-strength = <7>;\n};\n"})}),"\n",(0,r.jsx)(i.h3,{id:"driver-example-code",children:"Driver Example Code"}),"\n",(0,r.jsxs)(i.p,{children:["The driver first uses the ",(0,r.jsx)(i.code,{children:"Pinctrl-names"})," property to look up the corresponding Pinctrl state, and then switches to that state. Here's an example of how to do this:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'static int hobot_xxx_probe(struct platform_device *pdev)\n{\n    ...\n    g_xxx_dev->pinctrl = devm_pinctrl_get(&pdev->dev);\n    if (IS_ERR(g_xxx_dev->pinctrl)) {\n        dev_warn(&pdev->dev, "pinctrl get none\\n");\n        g_xxx_dev->pins_xxxx = NULL;\n    }\n    ...\n        /* Lookup pinctrl-names lookup state */\n        g_xxx_dev->pins_xxxx = pinctrl_lookup_state(g_xxx_dev->pinctrl, "xxx_func");\n    if (IS_ERR(g_xxx_dev->pins_xxxx)) {\n        dev_info(&pdev->dev, "xxx_func get error %ld\\n",\n                PTR_ERR(g_xxx_dev->pins_xxxx));\n        g_xxx_dev->pins_xxxx = NULL;\n    }\n    ...\n}\nint xxxx_pinmux_select(void)\n{\n    if (!g_xxx_dev->pins_xxxx)\n        return -ENODEV;\n    /* change to correspond  state */\n        return pinctrl_select_state(g_xxx_dev->pinctrl, g_xxx_dev->pins_xxxx);\n}\n'})}),"\n",(0,r.jsx)(i.h3,{id:"user-space-debugging",children:"User Space Debugging"}),"\n",(0,r.jsxs)(i.p,{children:["If the ",(0,r.jsx)(i.code,{children:"CONFIG_DEBUG_FS"})," option is enabled in the kernel configuration and the ",(0,r.jsx)(i.code,{children:"debugfs"})," file system is mounted, the kernel provides a debugfs interface for Pinctrl."]}),"\n",(0,r.jsxs)(i.p,{children:["First, check if ",(0,r.jsx)(i.code,{children:"debugfs"})," is already mounted. If the following command outputs non-empty data, it means that ",(0,r.jsx)(i.code,{children:"debugfs"})," is currently mounted:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-shell",children:"mount | grep debugfs\n"})}),"\n",(0,r.jsxs)(i.p,{children:["If no output is returned, you can mount ",(0,r.jsx)(i.code,{children:"debugfs"})," manually with the following command:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-shell",children:"mount -t debugfs none /sys/kernel/debug\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Once ",(0,r.jsx)(i.code,{children:"debugfs"})," is successfully mounted, the user can view Pinctrl information under the ",(0,r.jsx)(i.code,{children:"debugfs"})," directory in user space.\nFor example, for the LSIO subsystem, the debugfs node path is\uff1a",(0,r.jsx)(i.code,{children:"/sys/kernel/debug/pinctrl/34180000.lsio_iomuxc/"})]}),"\n",(0,r.jsx)(i.p,{children:"The nodes under this directory can view the Pinctrl information of the lsio domain pins (the following command output is for reference only; specific nodes are subject to the Linux kernel code):"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-shell",children:"ls /sys/kernel/debug/pinctrl/34180000.lsio_iomuxc/\ngpio-ranges  pinconf-groups  pinconf-pins  pingroups  pinmux-functions  pinmux-pins  pinmux-select  pins\n"})}),"\n",(0,r.jsx)(i.p,{children:'Taking "pinmux-pins" as an example, this node shows which pins are configured as configuration groups. (The following command output is for reference only, and the actual output may vary depending on the DTS configuration.)'}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-shell",children:"cat /sys/kernel/debug/pinctrl/34180000.lsio_iomuxc/pinmux-pins\npin 14 (lsio_spi0_sclk): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 36 (lsio_spi0_ssn): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 37 (lsio_spi0_miso): vdd08_gpu_reg@3 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio1_5\npin 38 (lsio_spi0_mosi): soc:cam:vcon@3 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio1_6\npin 15 (lsio_spi1_ssn_1): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 16 (lsio_spi1_sclk): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 17 (lsio_spi1_ssn): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 18 (lsio_spi1_miso): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 19 (lsio_spi1_mosi): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 20 (lsio_spi2_sclk): 34020000.spi (GPIO UNCLAIMED) function lsio_iomuxc group spi2grp\npin 21 (lsio_spi2_ssn): 34020000.spi (GPIO UNCLAIMED) function lsio_iomuxc group spi2grp\npin 22 (lsio_spi2_miso): 34020000.spi (GPIO UNCLAIMED) function lsio_iomuxc group spi2grp\npin 23 (lsio_spi2_mosi): 34020000.spi (GPIO UNCLAIMED) function lsio_iomuxc group spi2grp\npin 24 (lsio_spi3_sclk): 3d060000.mipi_host (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_24\npin 25 (lsio_spi3_ssn): 34110000.lpwm (GPIO UNCLAIMED) function lsio_iomuxc group pinctrl_lpwm1_1\npin 26 (lsio_spi3_miso): 3d080000.mipi_host (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_26\npin 27 (lsio_spi3_mosi): 3d090000.mipi_host (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_27\npin 28 (lsio_spi4_sclk): 341a0000.serial (GPIO UNCLAIMED) function lsio_iomuxc group uart5grp\npin 29 (lsio_spi4_ssn): 341a0000.serial (GPIO UNCLAIMED) function lsio_iomuxc group uart5grp\npin 30 (lsio_spi4_miso): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 31 (lsio_spi4_mosi): 35010000.gmac-tsn (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_31\npin 32 (lsio_spi5_sclk): 34100000.lpwm (GPIO UNCLAIMED) function lsio_iomuxc group pinctrl_lpwm0_0\npin 33 (lsio_spi5_ssn): 34100000.lpwm (GPIO UNCLAIMED) function lsio_iomuxc group pinctrl_lpwm0_1\npin 34 (lsio_spi5_miso): 34100000.lpwm (GPIO UNCLAIMED) function lsio_iomuxc group pinctrl_lpwm0_2\npin 35 (lsio_spi5_mosi): 34100000.lpwm (GPIO UNCLAIMED) function lsio_iomuxc group pinctrl_lpwm0_3\npin 39 (lsio_i2c0_scl): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 40 (lsio_i2c0_sda): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 41 (lsio_i2c1_scl): 34170000.pwm (GPIO UNCLAIMED) function lsio_iomuxc group pinctrl_pwm3_0\npin 42 (lsio_i2c1_sda): 34170000.pwm (GPIO UNCLAIMED) function lsio_iomuxc group pinctrl_pwm3_1\npin 43 (lsio_i2c2_scl): 340d0000.i2c (GPIO UNCLAIMED) function lsio_iomuxc group i2c2grp\npin 44 (lsio_i2c2_sda): 340d0000.i2c (GPIO UNCLAIMED) function lsio_iomuxc group i2c2grp\npin 45 (lsio_i2c3_scl): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 46 (lsio_i2c3_sda): (MUX UNCLAIMED) (GPIO UNCLAIMED)\npin 47 (lsio_i2c4_scl): 340f0000.i2c (GPIO UNCLAIMED) function lsio_iomuxc group i2c4grp\npin 48 (lsio_i2c4_sda): 340f0000.i2c (GPIO UNCLAIMED) function lsio_iomuxc group i2c4grp\npin 0 (lsio_uart7_rx): gpiochip8 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_0\npin 1 (lsio_uart7_tx): gpiochip8 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_1\npin 3 (lsio_uart7_rts): gpiochip8 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_3\npin 2 (lsio_uart7_cts): gpiochip8 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_2\npin 4 (lsio_uart1_rx): gpiochip8 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_4\npin 5 (lsio_uart1_tx): gpiochip8 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_5\npin 7 (lsio_uart1_rts): gpiochip8 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_7\npin 6 (lsio_uart1_cts): gpiochip8 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_6\npin 8 (lsio_uart2_rx): 34080000.serial (GPIO UNCLAIMED) function lsio_iomuxc group uart2grp\npin 9 (lsio_uart2_tx): 34080000.serial (GPIO UNCLAIMED) function lsio_iomuxc group uart2grp\npin 10 (lsio_uart3_rx): 341c0000.i2c (GPIO UNCLAIMED) function lsio_iomuxc group i2c5grp\npin 11 (lsio_uart3_tx): 341c0000.i2c (GPIO UNCLAIMED) function lsio_iomuxc group i2c5grp\npin 12 (lsio_uart4_rx): gpiochip8 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_12\npin 13 (lsio_uart4_tx): gpiochip8 (GPIO UNCLAIMED) function lsio_iomuxc group lsio_gpio0_13\n"})})]})}function u(n={}){const{wrapper:i}={...(0,t.R)(),...n.components};return i?(0,r.jsx)(i,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}}}]);