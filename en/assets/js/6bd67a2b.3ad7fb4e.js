"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[56973],{28453:(e,n,d)=>{d.d(n,{R:()=>r,x:()=>o});var c=d(96540);const t={},i=c.createContext(t);function r(e){const n=c.useContext(i);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),c.createElement(i.Provider,{value:n},e.children)}},93640:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/object_decoder","title":"Decoder Object","description":"The Decoder object implements the video data decoding functionality and includes methods such as decode, sendframe, getframe, close, etc. The detailed descriptions are as follows:","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/03_Basic_Application/04_multi_media/multi_media_api/pydev_multimedia_api_ultra/object_decoder.md","sourceDirName":"03_Basic_Application/04_multi_media/multi_media_api/pydev_multimedia_api_ultra","slug":"/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/object_decoder","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/object_decoder","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1757920682000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"object_encoder","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/object_encoder"},"next":{"title":"Display Object","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/object_display"}}');var t=d(74848),i=d(28453);const r={sidebar_position:3},o="Decoder Object",s={},l=[{value:"decode",id:"decode",level:2},{value:"get_img",id:"get_img",level:2},{value:"set_img",id:"set_img",level:2},{value:"close",id:"close",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"decoder-object",children:"Decoder Object"})}),"\n",(0,t.jsxs)(n.p,{children:["The Decoder object implements the video data decoding functionality and includes methods such as ",(0,t.jsx)(n.code,{children:"decode"}),", ",(0,t.jsx)(n.code,{children:"send_frame"}),", ",(0,t.jsx)(n.code,{children:"get_frame"}),", ",(0,t.jsx)(n.code,{children:"close"}),", etc. The detailed descriptions are as follows:"]}),"\n",(0,t.jsx)(n.h2,{id:"decode",children:"decode"}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,t.jsx)(n.p,{children:"Enables the decode module and decodes the video file."}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"Decoder.decode(decode_type, [width, height], file)\n"})}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter Name"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Value Range"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"file"}),(0,t.jsx)(n.td,{children:"The name of the file to decode"}),(0,t.jsx)(n.td,{children:"No specific range"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"decode_type"}),(0,t.jsx)(n.td,{children:"Video decode type"}),(0,t.jsxs)(n.td,{children:["Range 2-3, corresponding to ",(0,t.jsx)(n.code,{children:"H265"})," and ",(0,t.jsx)(n.code,{children:"MJPEG"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"width"}),(0,t.jsx)(n.td,{children:"Input image width for the decode module"}),(0,t.jsx)(n.td,{children:"Maximum 4096"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"height"}),(0,t.jsx)(n.td,{children:"Input image height for the decode module"}),(0,t.jsx)(n.td,{children:"Maximum 4096"})]})]})]}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'#create decode object\ndecode = libsrcampy.Decoder()\n\n#enable decode channel 0, solution: 1080p, format: h265\nret = dec.decode(2,[ 1920, 1080],"encode.h265")\n'})}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,t.jsxs)(n.p,{children:["The return value is a ",(0,t.jsx)(n.code,{children:"list"})," data with 2 members."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Return Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"list[0]"}),(0,t.jsx)(n.td,{children:"0: Decoding succeeded, -1: Decoding failed"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"list[1]"}),(0,t.jsx)(n.td,{children:"The number of frames in the input stream file, valid when decoding is successful"})]})]})]}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Note\u3011"}),"\n",(0,t.jsx)(n.p,{children:"None"}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,t.jsx)(n.p,{children:"None"}),"\n",(0,t.jsx)(n.h2,{id:"get_img",children:"get_img"}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,t.jsx)(n.p,{children:"Gets the output result of the decoding module."}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"Decoder.get_img()\n"})}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,t.jsx)(n.p,{children:"None"}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'ret = dec.decode(2,[ 1920, 1080],"encode.h265")\nprint ("Decoder return:%d frame count: %d" %(ret[0], ret[1]))\n\nimg = dec.get_img()\n'})}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Return Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"-1"}),(0,t.jsx)(n.td,{children:"Decoding data"})]})})]}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Note\u3011"}),"\n",(0,t.jsxs)(n.p,{children:["This interface needs to be used after calling ",(0,t.jsx)(n.code,{children:"Decoder.decode()"})," to create a decoding channel."]}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import sys, os, time\n\nimport numpy as np\nimport cv2\nfrom hobot_vio import libsrcampy\n\ndef test_decode():\n    #create decode object\n    dec = libsrcampy.Decoder()\n\n    #enable decode function\n    #decode input: encode.h265, solution: 1080p, format: h265\n    ret = dec.decode(2,[ 1920, 1080],"encode.h265")\n    print ("Decoder return:%d frame count: %d" %(ret[0], ret[1]))\n    \n    #get decoder output\n    img = dec.get_img()\n    if img is not None:\n        #save file\n        fo = open("output.img", "wb")\n        fo.write(img)\n        fo.close()\n        print("decode save img file success")\n    else:\n        print("decode save img file failed")\n\n    dec.close()\n    print("test_decode done!!!")\n\ntest_decode()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"set_img",children:"set_img"}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,t.jsx)(n.p,{children:"This function inputs a single frame of encoded data into the decoding module and performs the decoding."}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"Decoder.set_img(img)\n"})}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter Name"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Value Range"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"img"}),(0,t.jsx)(n.td,{children:"The single frame data to be decoded"}),(0,t.jsx)(n.td,{children:"None"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"chn"}),(0,t.jsx)(n.td,{children:"Decoder channel number"}),(0,t.jsx)(n.td,{children:"Range 0~31"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"eos"}),(0,t.jsx)(n.td,{children:"Whether the decoding data has ended"}),(0,t.jsx)(n.td,{children:"0: Not ended, 1: Ended"})]})]})]}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,t.jsx)(n.p,{children:"None"}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Return Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"0"}),(0,t.jsx)(n.td,{children:"Success"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"-1"}),(0,t.jsx)(n.td,{children:"Failure"})]})]})]}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Note\u3011"}),"\n",(0,t.jsxs)(n.p,{children:["This interface needs to be used after calling ",(0,t.jsx)(n.code,{children:"Decoder.decode()"})," to create a decoding channel, with the ",(0,t.jsx)(n.code,{children:"file"})," parameter set to null when creating the channel."]}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import sys, os, time\n\nimport numpy as np\nimport cv2\nfrom hobot_spdev import libsppydev as srcampy\n\ndef test_cam_bind_encode_decode_bind_display():\n    #camera start\n    cam = srcampy.Camera()\n    ret = cam.open_cam(-1, [[1920, 1080], [1280, 720]])\n    print("Camera open_cam return:%d" % ret)\n\n    #enable encoder\n    enc = srcampy.Encoder()\n    ret = enc.encode(2, [1920, 1080])\n    print("Encoder encode return:%d" % ret)\n\n    #enable decoder\n    dec = srcampy.Decoder()\n    ret = dec.decode(2,[ 1920, 1080],"")\n    print ("Decoder return:%d frame count: %d" %(ret[0], ret[1]))\n\n    ret = srcampy.bind(cam, enc)\n    print("libsrcampy bind return:%d" % ret)\n\n    a = 0\n    while a < 100:\n        #get encode image from encoder\n        img = enc.get_frame()\n        if img is not None:\n            #send encode image to decoder\n            dec.set_frame(img)\n            print("encode get image success count: %d" % a)\n        else:\n            print("encode get image failed count: %d" % a)\n        a = a + 1\n\n    ret = srcampy.unbind(cam, enc)\n    dec.close()\n    enc.close()\n    cam.close()\n    print("test_cam_bind_encode_decode_bind_display done!!!")\n\ntest_cam_bind_encode_decode_bind_display()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"close",children:"close"}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,t.jsx)(n.p,{children:"Closes the decoding module."}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"Decoder.close()\n"})}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,t.jsx)(n.p,{children:"None"}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,t.jsx)(n.p,{children:"None"}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Return Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"0"}),(0,t.jsx)(n.td,{children:"Success"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"-1"}),(0,t.jsx)(n.td,{children:"Failure"})]})]})]}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Note\u3011"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"close"})," interface must be called when exiting the program to release resources."]}),"\n",(0,t.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,t.jsx)(n.p,{children:"None"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);