"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[8826],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},55658:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Algorithm_Application/model_zoo/infer_api","title":"4.1.3 Model Zoo Inference API","description":"Overview","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/04_Algorithm_Application/01_model_zoo/infer_api.md","sourceDirName":"04_Algorithm_Application/01_model_zoo","slug":"/Algorithm_Application/model_zoo/infer_api","permalink":"/rdk_doc/en/Algorithm_Application/model_zoo/infer_api","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1761553174000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"4.1.2 Quick Start with Model Zoo","permalink":"/rdk_doc/en/Algorithm_Application/model_zoo/bpu_infer_lib_intro"},"next":{"title":"5. \u673a\u5668\u4eba\u5e94\u7528\u5f00\u53d1","permalink":"/rdk_doc/en/Robot_development"}}');var i=t(74848),o=t(28453);const s={sidebar_position:3},l="4.1.3 Model Zoo Inference API",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Infer Object",id:"infer-object",level:2},{value:"Infer",id:"infer",level:3},{value:"load_model",id:"load_model",level:3},{value:"read_input",id:"read_input",level:3},{value:"forward",id:"forward",level:3},{value:"get_output",id:"get_output",level:3}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"413-model-zoo-inference-api",children:"4.1.3 Model Zoo Inference API"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The board-side inference interface used by ModelZoo is ",(0,i.jsx)(n.strong,{children:"bpu_infer_lib"}),". In the previous section, we described how to install bpu_infer_lib, get started quickly, and use its basic features."]}),"\n",(0,i.jsx)(n.p,{children:"In this section, we will introduce the details and usage of each API provided by bpu_infer_lib."}),"\n",(0,i.jsx)(n.h2,{id:"infer-object",children:"Infer Object"}),"\n",(0,i.jsxs)(n.p,{children:["The Infer object orchestrates the entire inference process. By constructing an Infer object, you can handle the ",(0,i.jsx)(n.strong,{children:"model loading, input reading, inference, and output retrieval"})," in a complete workflow."]}),"\n",(0,i.jsx)(n.h3,{id:"infer",children:"Infer"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Function Description]"}),"\n",(0,i.jsx)(n.p,{children:"This function is the constructor for the Infer object, typically used after importing bpu_infer_lib."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Parameter Description]"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"debug"}),(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"Whether to enable debug printing for subsequent inference steps"})]})})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Usage]"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"import bpu_infer_lib\ninf = bpu_infer_lib.Infer(True)\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Return Value]"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Infer"}),(0,i.jsx)(n.td,{children:"Returns an Infer object with available interfaces for further use"})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"load_model",children:"load_model"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Function Description]"}),"\n",(0,i.jsx)(n.p,{children:"The load_model function is a member of the Infer object, used to load a DiGua BPU heterogeneous model."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Parameter Description]"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"model_path"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Path to the DiGua BPU heterogeneous model .bin file"})]})})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Usage]"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'inf.load_model("yolo_world.bin")\n'})}),"\n",(0,i.jsx)(n.p,{children:"After loading the model, you can check the required input and output properties. For example, you can view:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Number of model inputs"}),"\n",(0,i.jsx)(n.li,{children:"Data layout required for each input"}),"\n",(0,i.jsx)(n.li,{children:"Data type required for each input"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'print("Number of model\'s inputs:", len(inf.inputs))\nprint("Input[0]\'s tensor layout:", inf.inputs[0].properties.tensorLayout)\nprint("Input[0]\'s tensor type:", inf.inputs[0].properties.tensorType)\nprint("Input[1]\'s tensor layout:", inf.inputs[1].properties.tensorLayout)\nprint("Input[1]\'s tensor type:", inf.inputs[1].properties.tensorType)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Number of model's inputs: 2\nInput[0]'s tensor layout: HB_DNN_LAYOUT_NCHW\nInput[0]'s tensor type: HB_DNN_TENSOR_TYPE_F32\nInput[1]'s tensor layout: HB_DNN_LAYOUT_NCHW\nInput[1]'s tensor type: HB_DNN_TENSOR_TYPE_F32\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similarly, you can check:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Number of model outputs"}),"\n",(0,i.jsx)(n.li,{children:"Data layout required for each output"}),"\n",(0,i.jsx)(n.li,{children:"Data type required for each output"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'print("Number of model\'s outputs:", len(inf.outputs))\nprint("Output[0]\'s tensor layout:", inf.outputs[0].properties.tensorLayout)\nprint("Output[0]\'s tensor type:", inf.outputs[0].properties.tensorType)\nprint("Output[1]\'s tensor layout:", inf.outputs[1].properties.tensorLayout)\nprint("Output[1]\'s tensor type:", inf.outputs[1].properties.tensorType)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Number of model's outputs: 2\nOutput[0]'s tensor layout: HB_DNN_LAYOUT_NCHW\nOutput[0]'s tensor type: HB_DNN_TENSOR_TYPE_F32\nOutput[1]'s tensor layout: HB_DNN_LAYOUT_NCHW\nOutput[1]'s tensor type: HB_DNN_TENSOR_TYPE_F32\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Return Value]"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"Returns whether the model was loaded successfully"})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"read_input",children:"read_input"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Function Description]"}),"\n",(0,i.jsx)(n.p,{children:"The read_input function is a member of the Infer object, used to read a preprocessed numpy array as input."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Parameter Description]"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"input"}),(0,i.jsx)(n.td,{children:"np.array"}),(0,i.jsx)(n.td,{children:"The input numpy array"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"index"}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:"The index of the input numpy array. After loading the model, you can enable debug to check the order of multiple inputs. For single-input models, use index=0."})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Usage]"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"inf.read_input(input_image, 0)\ninf.read_input(text_embeddings, 1)\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Did you know?",type:"tip",children:(0,i.jsx)(n.p,{children:"inf.read_input automatically checks the data type and shape of the input numpy array. Any mismatched data type or shape will be validated, preventing invalid inputs from being read by the model."})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Return Value]"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"Returns whether the numpy array at the specified index was successfully read by the Infer object"})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"forward",children:"forward"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Function Description]"}),"\n",(0,i.jsx)(n.p,{children:"The forward function is a member of the Infer object, typically used after reading model inputs to perform inference with the DiGua BPU heterogeneous model."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Parameter Description]"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"more"}),(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"(Optional, default is False) If you need to perform multiple inferences using this interface, set this parameter to True."})]})})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Usage]"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"inf.forward()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"get_output",children:"get_output"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Function Description]"}),"\n",(0,i.jsx)(n.p,{children:"The get_output function is a member of the Infer object, typically used after calling the forward function to retrieve inference results."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Usage]"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"inf.get_output()\n"})}),"\n",(0,i.jsx)(n.p,{children:"The inference results are numpy arrays. You can obtain the two outputs as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"classes_scores = inf.outputs[0].data\nbboxes = inf.outputs[1].data\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Return Value]"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"Returns whether the Infer object successfully retrieved the inference results"})]})})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);