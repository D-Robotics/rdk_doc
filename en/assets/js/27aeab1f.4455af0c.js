"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[76192],{28453:(e,n,d)=>{d.d(n,{R:()=>r,x:()=>o});var c=d(96540);const i={},t=c.createContext(i);function r(e){const n=c.useContext(t);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),c.createElement(t.Provider,{value:n},e.children)}},66707:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>s});const c=JSON.parse('{"id":"Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_x3/object_decoder","title":"Decoder Object","description":"The Decoder object implements the decoding function for video data and includes several methods such as decode, setimg, getimg, close, etc. The detailed description is as follows:","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/03_Basic_Application/04_multi_media/multi_media_api/pydev_multimedia_api_x3/object_decoder.md","sourceDirName":"03_Basic_Application/04_multi_media/multi_media_api/pydev_multimedia_api_x3","slug":"/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_x3/object_decoder","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_x3/object_decoder","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1750439203000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Encoder Object","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_x3/object_encoder"},"next":{"title":"Display Object","permalink":"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_x3/object_display"}}');var i=d(74848),t=d(28453);const r={sidebar_position:3},o="Decoder Object",l={},s=[{value:"decode",id:"decode",level:2},{value:"get_img",id:"get_img",level:2},{value:"set_img",id:"set_img",level:2},{value:"close",id:"close",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"decoder-object",children:"Decoder Object"})}),"\n",(0,i.jsxs)(n.p,{children:["The Decoder object implements the decoding function for video data and includes several methods such as ",(0,i.jsx)(n.code,{children:"decode"}),", ",(0,i.jsx)(n.code,{children:"set_img"}),", ",(0,i.jsx)(n.code,{children:"get_img"}),", ",(0,i.jsx)(n.code,{children:"close"}),", etc. The detailed description is as follows:"]}),"\n",(0,i.jsx)(n.h2,{id:"decode",children:"decode"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Description]"}),"\n",(0,i.jsx)(n.p,{children:"Enables the decode decoding module and decodes the video file."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Function Declaration]"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Decoder.decode(file, video_chn, decode_type, width, height)\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Parameter Description]"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Value Range"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"file"}),(0,i.jsx)(n.td,{children:"File name to be decoded"}),(0,i.jsx)(n.td,{children:"N/A"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"video_chn"}),(0,i.jsx)(n.td,{children:"Video decoder channel number"}),(0,i.jsx)(n.td,{children:"Range: 0~31"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"decode_type"}),(0,i.jsx)(n.td,{children:"Video decoding type"}),(0,i.jsxs)(n.td,{children:["Range: 1~3, corresponding to ",(0,i.jsx)(n.code,{children:"H264"}),", ",(0,i.jsx)(n.code,{children:"H265"}),", ",(0,i.jsx)(n.code,{children:"MJPEG"})," respectively"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"width"}),(0,i.jsx)(n.td,{children:"Image width for input decoding module"}),(0,i.jsx)(n.td,{children:"Not exceeding 4096"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"height"}),(0,i.jsx)(n.td,{children:"Image height for input decoding module"}),(0,i.jsx)(n.td,{children:"Not exceeding 4096"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Usage]"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'#create decode object\ndecode = libsrcampy.Decoder()\n\n#enable decode channel 0, solution: 1080p, format: H264\nret = dec.decode("encode.h264", 0, 1, 1920, 1080)\n'})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"[Return Value]"}),"\n",(0,i.jsxs)(n.p,{children:["The return value is a ",(0,i.jsx)(n.code,{children:"list"})," data with 2 members."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Return Value"}),(0,i.jsx)(n.th,{children:"Definition"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"list[0]"}),(0,i.jsx)(n.td,{children:"0: decoding succeeded, -1: decoding failed"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"list[1]"}),(0,i.jsx)(n.td,{children:"Number of frames in the input stream file, valid when decoding succeeds"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Note\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)(n.h2,{id:"get_img",children:"get_img"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"Get the output result of the decoding module."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Decoder.get_img()\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'ret = dec.decode("encode.h264", 0, 1, 1920, 1080)\nprint ("Decoder return:%d frame count: %d" %(ret[0], ret[1]))\n\nimg = dec.get_img()\n'})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Return Value"}),(0,i.jsx)(n.th,{children:"Definition"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"-1"}),(0,i.jsx)(n.td,{children:"Decoded data"})]})})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsxs)(n.p,{children:["This interface needs to be used after calling ",(0,i.jsx)(n.code,{children:"Decoder.decode()"})," to create a decoding channel."]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import sys, os, time\n\nimport numpy as np\nimport cv2\nfrom hobot_vio import libsrcampy\n    def test_decode():\n    #create decode object\n    dec = libsrcampy.Decoder()\n\n    #enable decode function\n    #decode input: encode.h264, solution: 1080p, format: h264\n    ret = dec.decode("encode.h264", 0, 1, 1920, 1080)\n    print ("Decoder return:%d frame count: %d" %(ret[0], ret[1]))\n    \n    #get decoder output\n    img = dec.get_img()\n    if img is not None:\n        #save file\n        fo = open("output.img", "wb")\n        fo.write(img)\n        fo.close()\n        print("decode save img file success")\n    else:\n        print("decode save img file failed")\n\n    dec.close()\n    print("test_decode done!!!")\n\ntest_decode()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"set_img",children:"set_img"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"Send a single frame of encoded data to the decoding module for decoding."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Decoder.set_img(img, chn, eos)\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Definition"}),(0,i.jsx)(n.th,{children:"Value Range"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"img"}),(0,i.jsx)(n.td,{children:"Single frame of data to be decoded"}),(0,i.jsx)(n.td,{children:"N/A"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"chn"}),(0,i.jsx)(n.td,{children:"Channel number of the decoder"}),(0,i.jsx)(n.td,{children:"Range: 0~31"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"eos"}),(0,i.jsx)(n.td,{children:"Whether the decoding data is complete"}),(0,i.jsx)(n.td,{children:"0: not complete, 1: complete"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.p,{children:"N/A"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Values\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Return Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"Success"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"-1"}),(0,i.jsx)(n.td,{children:"Failure"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsxs)(n.p,{children:["This interface needs to be used after calling ",(0,i.jsx)(n.code,{children:"Decoder.decode()"})," to create a decoding channel, and the input parameter ",(0,i.jsx)(n.code,{children:"file"})," should be set to empty when creating the decoding channel."]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import sys, os, time\n\nimport numpy as np\nimport cv2\nfrom hobot_vio import libsrcampy\n\ndef test_cam_bind_encode_decode_bind_display():\n    #camera start\n    cam = libsrcampy.Camera()\n    ret = cam.open_cam(0, 1, 30, [1920, 1280], [1080, 720])\n    print("Camera open_cam return:%d" % ret)\n\n    #enable encoder\n    enc = libsrcampy.Encoder()\n    ret = enc.encode(0, 1, 1920, 1080)\n    print("Encoder encode return:%d" % ret)\n\n    #enable decoder\n    dec = libsrcampy.Decoder()\n    ret = dec.decode("", 0, 1, 1920, 1080)\n    print ("Decoder return:%d frame count: %d" %(ret[0], ret[1]))\n\n    ret = libsrcampy.bind(cam, enc)\n    print("libsrcampy bind return:%d" % ret)\n\n    a = 0\n    while a < 100:\n        #get encode image from encoder\n        img = enc.get_img()\n        if img is not None:\n            #send encode image to decoder\n            dec.set_img(img)\n            print("encode get image success count: %d" % a)\n        else:\n            print("encode get image failed count: %d" % a)\n        a = a + 1\n    ret = libsrcampy.unbind(cam, enc)\n    dec.close()\n    enc.close()\n    cam.close_cam()\n    print("test_cam_bind_encode_decode_bind_display done!!!")\n\n    test_cam_bind_encode_decode()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"close",children:"close"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"Close the decoding module."}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Function Declaration\u3011"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Decoder.close()\n"})}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Parameter Description\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Usage\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Return Value\u3011"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Return Value"}),(0,i.jsx)(n.th,{children:"Definition"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"Success"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"-1"}),(0,i.jsx)(n.td,{children:"Failed"})]})]})]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Notes\u3011"}),"\n",(0,i.jsxs)(n.p,{children:["It is necessary to call the ",(0,i.jsx)(n.code,{children:"close"})," interface to release resources when exiting the program."]}),"\n",(0,i.jsx)("font",{color:"Blue",children:"\u3010Reference Code\u3011"}),"\n",(0,i.jsx)(n.p,{children:"None"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);