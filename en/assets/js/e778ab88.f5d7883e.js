"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[79379],{28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>c});var t=i(96540);const s={},r=t.createContext(s);function d(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(r.Provider,{value:n},e.children)}},74131:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Basic_Application/03_40pin_user_guide/i2c","title":"3.3.5 Using I2C","description":"By default, RDK X3 enables I2C0 on pin 40, with physical pin numbers 3 and 5, and IO voltage of 3.3V.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/03_Basic_Application/03_40pin_user_guide/i2c.md","sourceDirName":"03_Basic_Application/03_40pin_user_guide","slug":"/Basic_Application/03_40pin_user_guide/i2c","permalink":"/rdk_doc/en/Basic_Application/03_40pin_user_guide/i2c","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1751967390000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"3.3.4 UART_usage","permalink":"/rdk_doc/en/Basic_Application/03_40pin_user_guide/uart"},"next":{"title":"3.3.6 Using SPI","permalink":"/rdk_doc/en/Basic_Application/03_40pin_user_guide/spi"}}');var s=i(74848),r=i(28453);const d={sidebar_position:5},c="3.3.5 Using I2C",a={},o=[{value:"Testing Method",id:"testing-method",level:2},{value:"Test Result",id:"test-result",level:2},{value:"Test Code",id:"test-code",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"335-using-i2c",children:"3.3.5 Using I2C"})}),"\n",(0,s.jsx)(n.p,{children:"By default, RDK X3 enables I2C0 on pin 40, with physical pin numbers 3 and 5, and IO voltage of 3.3V."}),"\n",(0,s.jsx)(n.p,{children:"RDX Ultra enables I2C4 and I2C6, with physical pin numbers 3, 5, 27, and 28, and IO voltage of 3.3V."}),"\n",(0,s.jsxs)(n.p,{children:["Please refer to ",(0,s.jsx)(n.code,{children:"/app/40pin_samples/test_i2c.py"})," for detailed information on how to use I2C."]}),"\n",(0,s.jsx)(n.h2,{id:"testing-method",children:"Testing Method"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Run the test program ",(0,s.jsx)(n.code,{children:"python3 /app/40pin_samples/test_i2c.py"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"List the currently enabled I2C buses"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Scan the bus to see which devices are connected to the bus by inputting the bus number"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Input the device address (in hexadecimal), and the test program will read one byte of data from that device"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"test-result",children:"Test Result"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Starting demo now! Press CTRL+C to exit\nList of enabled I2C controllers:\n/dev/i2c-0  /dev/i2c-1\nPlease input I2C BUS num:1\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- -- -- -- -- -- -- -- -- -- -- -- -- \n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n30: -- -- -- -- -- -- -- -- -- -- -- UU -- -- -- -- \n40: 40 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n70: -- -- -- -- -- -- -- --                         \nPlease input I2C device num(Hex):40\nRead data from device 40 on I2C bus 1\nread value= b'`'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"test-code",children:"Test Code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\n\nimport sys\nimport os\nimport time\n\n# import i2cdev\nfrom i2cdev import I2C\n\ndef i2cdevTest():\n    # device, bus = 0x51, 0\n    bus = input("Please input I2C BUS num:")\n    os.system(\'i2cdetect -y -r \' + bus)\n    device = input("Please input I2C device num(Hex):")\n    print("Read data from device %s on I2C bus %s" % (device, bus))\n    i2c = I2C(eval("0x" + device), int(bus))\n    value = i2c.read(1)\n    i2c.write(value)\n    print("read value=", value)\n    i2c.close()\n\nif __name__ == \'__main__\':\n    print("Starting demo now! Press CTRL+C to exit")\n    print("List of enabled I2C controllers:")\n    os.system(\'ls /dev/i2c*\')\n    while True:\n        i2cdevTest()\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);