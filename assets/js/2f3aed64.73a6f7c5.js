"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[40866],{28453:(t,n,e)=>{e.d(n,{R:()=>d,x:()=>a});var i=e(96540);const s={},r=i.createContext(s);function d(t){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof t?t(n):{...n,...t}},[n,t])}function a(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:d(t.components),i.createElement(r.Provider,{value:n},t.children)}},47668:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>_,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Advanced_development/linux_development/driver_development_x5/driver_spi_dev","title":"SPI\u8c03\u8bd5\u6307\u5357","description":"SPI\u786c\u4ef6\u652f\u6301","source":"@site/docs/07_Advanced_development/02_linux_development/driver_development_x5/driver_spi_dev.md","sourceDirName":"07_Advanced_development/02_linux_development/driver_development_x5","slug":"/Advanced_development/linux_development/driver_development_x5/driver_spi_dev","permalink":"/rdk_doc/Advanced_development/linux_development/driver_development_x5/driver_spi_dev","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1751891522000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"IO-DOMAIN\u8c03\u8bd5\u6307\u5357","permalink":"/rdk_doc/Advanced_development/linux_development/driver_development_x5/driver_io_domain_dev"},"next":{"title":"PWM \u9a71\u52a8\u8c03\u8bd5\u6307\u5357","permalink":"/rdk_doc/Advanced_development/linux_development/driver_development_x5/driver_pwm"}}');var s=e(74848),r=e(28453);const d={sidebar_position:7},a="SPI\u8c03\u8bd5\u6307\u5357",c={},l=[{value:"SPI\u786c\u4ef6\u652f\u6301",id:"spi\u786c\u4ef6\u652f\u6301",level:2},{value:"Linux SPI\u9a71\u52a8\u6846\u67b6\u4ecb\u7ecd",id:"linux-spi\u9a71\u52a8\u6846\u67b6\u4ecb\u7ecd",level:2},{value:"\u4ee3\u7801\u8def\u5f84",id:"\u4ee3\u7801\u8def\u5f84",level:3},{value:"\u63a7\u5236\u5668\u786c\u4ef6\u8bf4\u660e",id:"\u63a7\u5236\u5668\u786c\u4ef6\u8bf4\u660e",level:3},{value:"DTS\u914d\u7f6e\u8bf4\u660e",id:"dts\u914d\u7f6e\u8bf4\u660e",level:3},{value:"DTS\u914d\u7f6eSPI\u4f7f\u7528DMA",id:"dts\u914d\u7f6espi\u4f7f\u7528dma",level:3},{value:"SPI\u529f\u80fd\u9a8c\u8bc1",id:"spi\u529f\u80fd\u9a8c\u8bc1",level:2},{value:"\u6d4b\u8bd5\u73af\u5883\u51c6\u5907",id:"\u6d4b\u8bd5\u73af\u5883\u51c6\u5907",level:3},{value:"SPI \u5185\u90e8\u56de\u73af\u6d4b\u8bd5",id:"spi-\u5185\u90e8\u56de\u73af\u6d4b\u8bd5",level:3},{value:"SPI \u5916\u90e8\u56de\u73af\u6d4b\u8bd5",id:"spi-\u5916\u90e8\u56de\u73af\u6d4b\u8bd5",level:3},{value:"\u9644\u5f55",id:"\u9644\u5f55",level:2},{value:"\u5e38\u89c1\u95ee\u9898",id:"\u5e38\u89c1\u95ee\u9898",level:2}];function o(t){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"spi\u8c03\u8bd5\u6307\u5357",children:"SPI\u8c03\u8bd5\u6307\u5357"})}),"\n",(0,s.jsx)(n.h2,{id:"spi\u786c\u4ef6\u652f\u6301",children:"SPI\u786c\u4ef6\u652f\u6301"}),"\n",(0,s.jsxs)(n.p,{children:["X5\u5171\u652f\u63017\u8defSPI\u63a7\u5236\u5668\uff0c\u5176\u4e2d6\u8def(spi0-spi5)\u4f4d\u4e8eLSIO\u5b50\u7cfb\u7edf\uff0c1\u8def(spi6)\u4f4d\u4e8eDSP\u5b50\u7cfb\u7edf\u3002 \u6240\u6709SPI\u63a7\u5236\u5668\u5747\u652f\u6301\u4e3b/\u4ece\u6a21\u5f0f\u3002\nRDK X5 \u4e0a\u7559\u51fa\u6765\u7684\u5f15\u811a\u4e3b\u8981\u662f\u5728 40pin \u4e2d\uff0c\u5206\u522b\u662f",(0,s.jsx)(n.strong,{children:"SPI1"}),"\u548c",(0,s.jsx)(n.strong,{children:"SPI2"}),"\uff0c\u53ef\u4ee5\u53c2\u8003RDK X5 ",(0,s.jsx)(n.a,{href:"/rdk_doc/Basic_Application/03_40pin_user_guide/40pin_define#40pin_define",children:"40pin\u4ecb\u7ecd"}),"\n\u5176\u4ed6\u7684 SPI \u53e3\u5e76\u4e0d\u5728 40pin \u4e0a\u3002"]}),"\n",(0,s.jsx)(n.h2,{id:"linux-spi\u9a71\u52a8\u6846\u67b6\u4ecb\u7ecd",children:"Linux SPI\u9a71\u52a8\u6846\u67b6\u4ecb\u7ecd"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"spi driver\u5c42\uff1a\u4e3b\u8981\u5b9e\u73b0\u5bf9SPI\u786c\u4ef6IP\u7684\u64cd\u4f5c\uff0c\u53e6\u5916\u8fd8\u5b9e\u73b0\u4e86spi framework\u5b9a\u4e49\u7684\u63a5\u53e3\u3002"}),"\n",(0,s.jsx)(n.li,{children:"spi framework\u5c42\uff1a\u53ef\u4ee5\u7406\u89e3\u4e3aspi driver\u7684\u9002\u914d\u5c42\uff0c\u5bf9\u4e0b\u5c42\u5b9a\u4e49\u4e86\u4e00\u7ec4driver\u5c42\u9700\u8981\u5b9e\u73b0\u7684\u63a5\u53e3\uff0c\u5bf9\u4e0a\u63d0\u4f9b\u4e86\u901a\u7528\u63a5\u53e3\u5c4f\u853d\u4e86\u786c\u4ef6\u7ec6\u8282\u3002"}),"\n",(0,s.jsx)(n.li,{children:"spi char device\u5c42\uff1a\u4e3a\u7528\u6237\u7a7a\u95f4\u63d0\u4f9b\u8282\u70b9\uff0c\u65b9\u4fbf\u7528\u6237\u7a7a\u95f4\u4e0e\u5185\u6838\u7a7a\u95f4\u8fdb\u884c\u6570\u636e\u4ea4\u6362\u3002"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\u4ee3\u7801\u8def\u5f84",children:"\u4ee3\u7801\u8def\u5f84"}),"\n",(0,s.jsx)(n.p,{children:"X5\u4f7f\u7528\u65b0\u601d\u7684ssi\u63a7\u5236\u5668\uff0c\u9a71\u52a8\u4ee3\u7801\u4f4d\u4e8e\uff1adrivers/spi\u76ee\u5f55\u4e0b\uff0c\u4e3b\u8981\u6709\u4e09\u4e2a\u6587\u4ef6\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"drivers/spi/spi-dw-core.c\ndrivers/spi/spi-dw-mmio.c\ndrivers/spi/spi-dw-dma.c\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\u63a7\u5236\u5668\u786c\u4ef6\u8bf4\u660e",children:"\u63a7\u5236\u5668\u786c\u4ef6\u8bf4\u660e"}),"\n",(0,s.jsx)(n.p,{children:"X5\u7684\u6240\u6709SPI\u5747\u63a7\u5236\u5668\u53ef\u4ee5\u8fd0\u884cMaster/Slave\u6a21\u5f0f\u3002Master\u53caSlave\u7684\u8fd0\u884c\u9650\u5236\u5982\u4e0b\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SPI-Master\uff1a\u6700\u9ad8\u9891\u738750MHz"}),"\n",(0,s.jsx)(n.li,{children:"SPI-Slave\uff1a\u6700\u9ad8\u9891\u738732MHz"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"X5\u7684\u6240\u6709SPI\u63a7\u5236\u5668\u5747\u53ef\u4ee5\u8fd0\u884c\u5728\u4e2d\u65ad/DMA\u6a21\u5f0f\u3002\u4e2d\u65ad\u6a21\u5f0f\u8fd0\u884c\u9650\u5236\u5982\u4e0b\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["SPI-Slave\uff1a","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Rx\uff1aCPU\u5b9a\u9891\u57281.5GHz\u65f6\uff0c\u53ef\u4ee5\u8fbe\u523032MHz"}),"\n",(0,s.jsx)(n.li,{children:"Tx\uff1aCPU\u5b9a\u9891\u57281.5GHz\u65f6\uff0c\u53ef\u4ee5\u8fbe\u523016MHz"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"SPI-Master\uff1a\u5747\u53ef\u6b63\u5e38\u901a\u8baf\u3002"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"dts\u914d\u7f6e\u8bf4\u660e",children:"DTS\u914d\u7f6e\u8bf4\u660e"}),"\n",(0,s.jsxs)(n.p,{children:["X5 SPI\u63a7\u5236\u5668\u7684\u8bbe\u5907\u6811\u5b9a\u4e49\u4f4d\u4e8eSDK\u5305\u7684kernel\u6587\u4ef6\u5939\u4e0b\u7684",(0,s.jsx)(n.code,{children:"arch/arm64/boot/dts/hobot/x5.dtsi"}),"\u6587\u4ef6\u5185\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("font",{color:"red",children:"\u6ce8\u610f\uff1a"}),"x5.dtsi\u4e2d\u7684\u8282\u70b9\u4e3b\u8981\u58f0\u660eSoC\u5171\u6709\u7279\u6027\uff0c\u548c\u5177\u4f53\u7535\u8def\u677f\u65e0\u5173\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u7528\u4fee\u6539\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"X5 SPI\u63a7\u5236\u5668\u9ed8\u8ba4\u5173\u95ed\uff0c\u8bf7\u6839\u636e\u5b9e\u9645\u786c\u4ef6\u60c5\u51b5\uff0c\u5728\u5bf9\u5e94\u7684DTS\u6587\u4ef6\u5185\u4f7f\u80fd\u76f8\u5e94\u7684SPI\u63a7\u5236\u5668\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4ee5\u4f7f\u80fdSPI2\u4e3a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'&spi2 {\n\tstatus = "okay";\n\tpinctrl-names = "default";\n\tpinctrl-0 = <&pinctrl_spi2>;\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"dts\u914d\u7f6espi\u4f7f\u7528dma",children:"DTS\u914d\u7f6eSPI\u4f7f\u7528DMA"}),"\n",(0,s.jsx)(n.p,{children:"\u5982\u679c\u9700\u8981\u4f7f\u7528DMA\uff0c\u5219\u9700\u8981\u5728\u5bf9\u5e94\u7684DTS\u6587\u4ef6\u5185\u7ed1\u5b9a\u5bf9\u5e94\u7684DMA\u63e1\u624b\uff0c\u4ee5SPI2\u4e3a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'&spi2 {\n\tstatus = "okay";\n\tpinctrl-names = "default";\n\tpinctrl-0 = <&pinctrl_spi2>;\n\tdma-names = "tx", "rx";\n\tdmas = <&axi_dmac 25>, <&axi_dmac 24>;\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"SPI6\u7ed1\u5b9a\u65f6\u9700\u8981\u6307\u5b9adsp_axi_dma\uff0c\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'&spi6 {\n\tstatus = "okay";\n\tpinctrl-names = "default";\n\tpinctrl-0 = <&pinctrl_dsp_spi>;\n\tdma-names = "tx", "rx";\n\tdmas = <&dsp_axi_dma 21>, <&dsp_axi_dma 20>;\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"SPI DMA\u63e1\u624b\u5217\u8868\u5982\u4e0b\uff1a"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"SPI"}),(0,s.jsx)(n.th,{children:"DMA TX"}),(0,s.jsx)(n.th,{children:"DMA RX"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SPI0"}),(0,s.jsx)(n.td,{children:"20"}),(0,s.jsx)(n.td,{children:"21"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SPI1"}),(0,s.jsx)(n.td,{children:"22"}),(0,s.jsx)(n.td,{children:"23"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SPI2"}),(0,s.jsx)(n.td,{children:"24"}),(0,s.jsx)(n.td,{children:"25"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SPI3"}),(0,s.jsx)(n.td,{children:"26"}),(0,s.jsx)(n.td,{children:"27"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SPI4"}),(0,s.jsx)(n.td,{children:"28"}),(0,s.jsx)(n.td,{children:"29"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SPI5"}),(0,s.jsx)(n.td,{children:"30"}),(0,s.jsx)(n.td,{children:"31"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SPI6"}),(0,s.jsx)(n.td,{children:"21"}),(0,s.jsx)(n.td,{children:"22"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"spi\u529f\u80fd\u9a8c\u8bc1",children:"SPI\u529f\u80fd\u9a8c\u8bc1"}),"\n",(0,s.jsx)(n.p,{children:"\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecdX5 SPI\u7684\u529f\u80fd\u9a8c\u8bc1\uff0c\u4e3b\u8981\u5305\u62ec\u73af\u5883\u914d\u7f6e\uff0c\u6d4b\u8bd5\u547d\u4ee4\u6267\u884c\u53ca\u6d4b\u8bd5\u4ee3\u7801\u7b49\u3002"}),"\n",(0,s.jsx)(n.h3,{id:"\u6d4b\u8bd5\u73af\u5883\u51c6\u5907",children:"\u6d4b\u8bd5\u73af\u5883\u51c6\u5907"}),"\n",(0,s.jsx)(n.p,{children:"\u786e\u8ba4\u5185\u6838\u7684CONFIG_SPI_SPIDEV\u4e3a\u4f7f\u80fd\u72b6\u6001:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/* arch/arm64/configs/hobot_x5_soc_defconfig */\n...\nCONFIG_SPI_SPIDEV=m\n...\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u786e\u8ba4\u5728\u5f53\u524d\u786c\u4ef6\u7684DTS\u5185\u9700\u8981\u6d4b\u8bd5\u7684SPI\u63a7\u5236\u5668\u8282\u70b9\u4e0b\u521b\u5efa\u4e86\u4e00\u4e2adummy\u4ece\u8bbe\u5907\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'&spi2 {\n\tspidev@2 {\n\t\tcompatible = "dr,x5-spidev";\n\t\tspi-max-frequency = <32000000>;\n\t\treg = <0>;\n\t};\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spi-\u5185\u90e8\u56de\u73af\u6d4b\u8bd5",children:"SPI \u5185\u90e8\u56de\u73af\u6d4b\u8bd5"}),"\n",(0,s.jsx)(n.p,{children:"SPI\u5185\u90e8\u56de\u73af\u6d4b\u8bd5\u4ec5SPI Master\u652f\u6301\uff0c\u5176\u539f\u7406\u662fSPI\u786c\u4ef6IP\u7684tx fifo\u5c06\u6570\u636e\u53d1\u7ed9rx fifo\u4ece\u800c\u5f62\u6210\u56de\u73af\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u6d4b\u8bd5\u547d\u4ee4\u53ca\u7ed3\u679c\u53c2\u8003\u5982\u4e0b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"# modprobe spidev\n# ./spidev_tc -D /dev/spidev2.0 -v -s 1000000 -m 3 -l -e 10 -t 1\n   spi mode: 0x20\n   bits per word: 8\n   max speed: 1000000 Hz (1000 KHz)\n   userspace spi read and write test, len=10 times=1\n   test, times=0\n   TX | 67 C6 69 73 51 FF 4A EC 29 CD __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __\n\n   RX | 67 C6 69 73 51 FF 4A EC 29 CD __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __\n"})}),"\n",(0,s.jsx)(n.h3,{id:"spi-\u5916\u90e8\u56de\u73af\u6d4b\u8bd5",children:"SPI \u5916\u90e8\u56de\u73af\u6d4b\u8bd5"}),"\n",(0,s.jsx)(n.p,{children:"SPI \u5916\u90e8\u56de\u73af\u6d4b\u8bd5\u662f\u6307\u5b9a\u4e00\u4e2aSPI Slave\uff0c\u4e00\u4e2aSPI Master\uff0c\u5bf9\u5e94\u7ebf\u8fde\u63a5\u8fdb\u884c\u7684\u6d4b\u8bd5\u3002 \u6211\u4eec\u57fa\u4e8e RDK X5 \u7684\u786c\u4ef6\u4ee5SPI2\u4f5c\u4e3aSlave\uff0cSPI1\u4f5c\u4e3aMaster\uff08\u4f7f\u7528\u53cc\u7247\u9009\u4e2d\u7684SPI1.1\uff09\u4e3a\u4f8b\uff1a \u4fee\u6539SPI2 DTS\u4ee5\u652f\u6301Slave\u529f\u80fd\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'&spi2 {\n\tstatus = "okay";\n\tpinctrl-names = "default";\n\tpinctrl-0 = <&pinctrl_spi2>;\n\tspi-slave;\n\n\tslave@0 {\n\t\tcompatible = "dr,x5-spidev";\n\t\tspi-max-frequency = <32000000>;\n\t\treg = <0>;\n\t};\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"\u4fee\u6539SPI1 DTS\u4ee5\u652f\u6301Master\u529f\u80fd\uff1a\uff08SPI1\u5177\u6709\u4e24\u4e2a\u7247\u9009\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e86\u4e24\u4e2a\u8bbe\u5907\u5b50\u8282\u70b9\uff0c\u7cfb\u7edf\u6b63\u5e38\u542f\u52a8\u4e4b\u540e\uff0c\u4f53\u73b0\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u5c31\u4f1a\u6709\u4e24\u4e2a\u8bbe\u5907\uff0c/dev/spi1.0 \u548c /dev/spi1.1\uff09"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'&spi1 {\n\tstatus = "okay";\n\tpinctrl-names = "default";\n\tpinctrl-0 = <&pinctrl_spi1 &pinctrl_spi1_ssn1>;\n\n\tspidev@0 {\n\t\tcompatible = "dr,x5-spidev";\n\t\tspi-max-frequency = <32000000>;\n\t\treg = <0>;\n\t};\n\n\tspidev@1 {\n\t\tcompatible = "dr,x5-spidev";\n\t\tspi-max-frequency = <32000000>;\n\t\treg = <1>;\n\t};\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"\u6d4b\u8bd5\u547d\u4ee4\u53ca\u7ed3\u679c\u53c2\u8003\u5982\u4e0b(\u4ee5SPI2\u4e3aSlave\uff0cSPI1.1\u4e3aMaster)\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"\n1\u3001\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u64cd\u4f5c SPI \u4ece\u8bbe\u5907\uff1a\n\nroot@ubuntu:~# /app/multimedia_samples/chip_base_test/05_spi_test/spidev_tc -D /dev/spidev2.0 -e 1 -v -S 64 -I 1\nspi mode: 0x0\nbits per word: 8\nmax speed: 500000 Hz (500 kHz)\nUserspace spi read test, test_len=64 iterations=1\n\n\uff08\u8bf4\u660e\uff1a\u4e0a\u8ff0\u547d\u4ee4\u6267\u884c\u4e4b\u540e\uff0c\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\uff0c\u76f4\u5230\u63a5\u6536\u5230\u4ece SPI Master \u53d1\u9001\u7684\u6570\u636e\u3002\uff09\n\n\n\n2\u3001\u6253\u5f00\u53e6\u4e00\u4e2a\u7ec8\u7aef\uff0c\u64cd\u4f5c SPI \u4e3b\u8bbe\u5907\uff1a\nroot@ubuntu:~# /app/multimedia_samples/chip_base_test/05_spi_test/spidev_tc -D /dev/spidev1.1 -e 2 -v -S 64 -I 1\nspi mode: 0x0\nbits per word: 8\nmax speed: 500000 Hz (500 kHz)\nUserspace spi write test, test_len=64 iterations=1\nTX | 67 C6 69 73 51 FF 4A EC 29 CD BA AB F2 FB E3 46 7C C2 54 F8 1B E8 E7 8D 76 5A 2E 63 33 9F C9 9A  |g.isQ.J.)......F|.T.....vZ.c3...|\nTX | 66 32 0D B7 31 58 A3 5A 25 5D 05 17 58 E9 5E D4 AB B2 CD C6 9B B4 54 11 0E 82 74 41 21 3D DC 87  |f2..1X.Z%]..X.^.......T...tA!=..|\nTest times: 0\nroot@ubuntu:~#\n\n\uff08\u8bf4\u660e\uff1a\u4e0a\u8ff0\u547d\u4ee4\u6267\u884c\u4e4b\u540e\uff0cSPI\u4e3b\u8bbe\u5907\u5c31\u76f4\u63a5\u53d1\u9001\u6570\u636e\u51fa\u53bb\u4e86\uff09\n\n\n\n3\u3001\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u89c2\u5bdf\u5230 SPI \u4ece\u8bbe\u5907\u7684\u7ec8\u7aef\u4f1a\u663e\u793a\u63a5\u6536\u5230\u7684\u6570\u636e\uff0c\u6574\u4f53\u72b6\u6001\u5f62\u5982\u4e0b\u8ff0\u7ed3\u679c\uff1a\n\nroot@ubuntu:~# /app/multimedia_samples/chip_base_test/05_spi_test/spidev_tc -D /dev/spidev2.0 -e 1 -v -S 64 -I 1\nspi mode: 0x0\nbits per word: 8\nmax speed: 500000 Hz (500 kHz)\nUserspace spi read test, test_len=64 iterations=1\nRX | 67 C6 69 73 51 FF 4A EC 29 CD BA AB F2 FB E3 46 7C C2 54 F8 1B E8 E7 8D 76 5A 2E 63 33 9F C9 9A  |g.isQ.J.)......F|.T.....vZ.c3...|\nRX | 66 32 0D B7 31 58 A3 5A 25 5D 05 17 58 E9 5E D4 AB B2 CD C6 9B B4 54 11 0E 82 74 41 21 3D DC 87  |f2..1X.Z%]..X.^.......T...tA!=..|\nrate: tx 0.1kbps, rx 0.1kbps\nTest times: 0\nroot@ubuntu:~#\n\n\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"\u5907\u6ce8",type:"info",children:(0,s.jsx)(n.p,{children:"\u5728\u8fdb\u884c\u5916\u90e8\u56de\u73af\u6d4b\u8bd5\u65f6\uff0c\u9700\u8981\u5148\u6267\u884cSPI Slave\u7a0b\u5e8f\uff0c\u518d\u6267\u884cSPI Master\u7a0b\u5e8f\u3002\u5047\u5982\u5148\u6267\u884cSPI Master\u7a0b\u5e8f\uff0c\u540e\u6267\u884cSPI Slave\u7a0b\u5e8f\uff0c\u53ef\u80fd\u4f1a\u7531\u4e8eMaster\u4e0eSlave\u4e0d\u540c\u6b65\u5bfc\u81f4SPI\u63a5\u6536\u6570\u636e\u51fa\u73b0\u4e22\u5931\u3002\u5982\u679c\u60f3\u8fdb\u884c\u591a\u6b21\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u5199\u811a\u672c\u591a\u6b21\u6267\u884c\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u6765\u4fdd\u8bc1Master\u4e0eSlave\u4e4b\u95f4\u7684\u540c\u6b65\u3002"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9644\u5f55",children:"\u9644\u5f55"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\u9644\u5f551 \u6d4b\u8bd5\u7528\u4f8b\u6e90\u7801\uff1aspidev_tc.c"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Copyright (c) 2024\uff0cD-Robotics.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/*\n * SPI testing utility (using spidev driver)\n *\n * Copyright (c) 2007  MontaVista Software, Inc.\n * Copyright (c) 2007  Anton Vorontsov <avorontsov@ru.mvista.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License.\n *\n * Cross-compile with cross-gcc -I/path/to/cross-kernel/include\n */\n\n#include <stdint.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <getopt.h>\n#include <fcntl.h>\n#include <time.h>\n#include <sys/ioctl.h>\n#include <linux/ioctl.h>\n#include <sys/stat.h>\n#include <linux/types.h>\n#include <linux/spi/spidev.h>\n\n#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))\n\nstatic void pabort(const char *s)\n{\n\tif (errno != 0)\n\t\tperror(s);\n\telse\n\t\tprintf("%s\\n", s);\n\n\tabort();\n}\n\nstatic const char *device = "/dev/spidev1.1";\nstatic uint32_t mode;\nstatic uint8_t bits = 8;\nstatic char *input_file;\nstatic char *output_file;\nstatic uint32_t speed = 500000;\nstatic uint16_t delay;\nstatic int verbose;\nstatic int transfer_size;\nstatic int iterations = -1;\nstatic int interval = 5; /* interval in seconds for showing transfer rate */\nstatic int ext_mode = 0; //1: read, 2: write, 3: write and read(loopback)\n\nstatic uint8_t default_tx[] = {\n\t0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n\t0x40, 0x00, 0x00, 0x00, 0x00, 0x95,\n\t0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n\t0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n\t0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n\t0xF0, 0x0D,\n};\n\nstatic uint8_t default_rx[ARRAY_SIZE(default_tx)] = {0, };\nstatic char *input_tx;\n\nstatic void hex_dump(const void *src, size_t length, size_t line_size,\n\t\tchar *prefix)\n{\n\tint i = 0;\n\tconst unsigned char *address = src;\n\tconst unsigned char *line = address;\n\tunsigned char c;\n\n\tprintf("%s | ", prefix);\n\twhile (length-- > 0) {\n\t\tprintf("%02X ", *address++);\n\t\tif (!(++i % line_size) || (length == 0 && i % line_size)) {\n\t\t\tif (length == 0) {\n\t\t\t\twhile (i++ % line_size)\n\t\t\t\t\tprintf("__ ");\n\t\t\t}\n\t\t\tprintf(" |");\n\t\t\twhile (line < address) {\n\t\t\t\tc = *line++;\n\t\t\t\tprintf("%c", (c < 32 || c > 126) ? \'.\' : c);\n\t\t\t}\n\t\t\tprintf("|\\n");\n\t\t\tif (length > 0)\n\t\t\t\tprintf("%s | ", prefix);\n\t\t}\n\t}\n}\n\n/*\n *  Unescape - process hexadecimal escape character\n *      converts shell input "\\x23" -> 0x23\n */\nstatic int unescape(char *_dst, char *_src, size_t len)\n{\n\tint ret = 0;\n\tint match;\n\tchar *src = _src;\n\tchar *dst = _dst;\n\tunsigned int ch;\n\n\twhile (*src) {\n\t\tif (*src == \'\\\\\' && *(src+1) == \'x\') {\n\t\t\tmatch = sscanf(src + 2, "%2x", &ch);\n\t\t\tif (!match)\n\t\t\t\tpabort("malformed input string");\n\n\t\t\tsrc += 4;\n\t\t\t*dst++ = (unsigned char)ch;\n\t\t} else {\n\t\t\t*dst++ = *src++;\n\t\t}\n\t\tret++;\n\t}\n\treturn ret;\n}\n\nstatic void transfer(int fd, uint8_t const *tx, uint8_t const *rx, size_t len)\n{\n\tint ret;\n\tint out_fd;\n\tstruct spi_ioc_transfer tr = {\n\t\t.tx_buf = (unsigned long)tx,\n\t\t.rx_buf = (unsigned long)rx,\n\t\t.len = len,\n\t\t.delay_usecs = delay,\n\t\t.speed_hz = speed,\n\t\t.bits_per_word = bits,\n\t};\n\n\tif (mode & SPI_TX_QUAD)\n\t\ttr.tx_nbits = 4;\n\telse if (mode & SPI_TX_DUAL)\n\t\ttr.tx_nbits = 2;\n\telse if (mode & SPI_RX_QUAD)\n\t\ttr.rx_nbits = 4;\n\telse if (mode & SPI_RX_DUAL)\n\t\ttr.rx_nbits = 2;\n\tif (!(mode & SPI_LOOP)) {\n\t\tif (mode & (SPI_TX_QUAD | SPI_TX_DUAL))\n\t\t\ttr.rx_buf = 0;\n\t\telse if (mode & (SPI_RX_QUAD | SPI_RX_DUAL))\n\t\t\ttr.tx_buf = 0;\n\t}\n\n\tret = ioctl(fd, SPI_IOC_MESSAGE(1), &tr);\n\tif (ret < 1)\n\t\tpabort("can\'t send spi message");\n\n\tif (verbose && ext_mode >> 1)\n\t\thex_dump(tx, len, 32, "TX");\n\n\tif (output_file) {\n\t\tout_fd = open(output_file, O_WRONLY | O_CREAT | O_TRUNC, 0666);\n\t\tif (out_fd < 0)\n\t\t\tpabort("could not open output file");\n\n\t\tret = write(out_fd, rx, len);\n\t\tif (ret != len)\n\t\t\tpabort("not all bytes written to output file");\n\n\t\tclose(out_fd);\n\t}\n\n\tif (verbose && ext_mode&0x01)\n\t\thex_dump(rx, len, 32, "RX");\n}\n\nstatic void print_usage(const char *prog)\n{\n\tprintf("Usage: %s [-DsbdlHOLC3vpNR24SIeh]\\n", prog);\n\tputs("  -D --device   device to use (default /dev/spidev1.1)\\n"\n\t\t\t"  -s --speed    max speed (Hz)\\n"\n\t\t\t"  -d --delay    delay (usec)\\n"\n\t\t\t"  -b --bpw      bits per word\\n"\n\t\t\t"  -i --input    input data from a file (e.g. \\"test.bin\\")\\n"\n\t\t\t"  -o --output   output data to a file (e.g. \\"results.bin\\")\\n"\n\t\t\t"  -l --loop     loopback\\n"\n\t\t\t"  -H --cpha     clock phase\\n"\n\t\t\t"  -O --cpol     clock polarity\\n"\n\t\t\t"  -L --lsb      least significant bit first\\n"\n\t\t\t"  -C --cs-high  chip select active high\\n"\n\t\t\t"  -3 --3wire    SI/SO signals shared\\n"\n\t\t\t"  -v --verbose  Verbose (show tx buffer)\\n"\n\t\t\t"  -p            Send data (e.g. \\"1234\\\\xde\\\\xad\\")\\n"\n\t\t\t"  -N --no-cs    no chip select\\n"\n\t\t\t"  -R --ready    slave pulls low to pause\\n"\n\t\t\t"  -2 --dual     dual transfer\\n"\n\t\t\t"  -4 --quad     quad transfer\\n"\n\t\t\t"  -S --size     transfer size\\n"\n\t\t\t"  -I --iter     iterations\\n"\n\t\t\t"  -e --exmode   Specify the test ext_mode, 1: read, 2: write, 3: write and read\\n"\n\t\t\t"  -h --help     Display this help message\\n");\n\texit(1);\n}\n\nstatic void parse_opts(int argc, char *argv[])\n{\n\twhile (1) {\n\t\tstatic const struct option lopts[] = {\n\t\t\t{ "device",  1, 0, \'D\' },\n\t\t\t{ "speed",   1, 0, \'s\' },\n\t\t\t{ "delay",   1, 0, \'d\' },\n\t\t\t{ "bpw",     1, 0, \'b\' },\n\t\t\t{ "input",   1, 0, \'i\' },\n\t\t\t{ "output",  1, 0, \'o\' },\n\t\t\t{ "loop",    0, 0, \'l\' },\n\t\t\t{ "cpha",    0, 0, \'H\' },\n\t\t\t{ "cpol",    0, 0, \'O\' },\n\t\t\t{ "lsb",     0, 0, \'L\' },\n\t\t\t{ "cs-high", 0, 0, \'C\' },\n\t\t\t{ "3wire",   0, 0, \'3\' },\n\t\t\t{ "no-cs",   0, 0, \'N\' },\n\t\t\t{ "ready",   0, 0, \'R\' },\n\t\t\t{ "dual",    0, 0, \'2\' },\n\t\t\t{ "verbose", 0, 0, \'v\' },\n\t\t\t{ "quad",    0, 0, \'4\' },\n\t\t\t{ "size",    1, 0, \'S\' },\n\t\t\t{ "iter",    1, 0, \'I\' },\n\t\t\t{ "exmode",  1, 0, \'e\' },\n\t\t\t{ "help",    0, 0, \'h\' },\n\t\t\t{ NULL, 0, 0, 0 },\n\t\t};\n\t\tint c;\n\n\t\tc = getopt_long(argc, argv, "D:s:d:b:i:o:lHOLC3NR24p:vS:I:e:h",\n\t\t\t\tlopts, NULL);\n\n\t\tif (c == -1)\n\t\t\tbreak;\n\n\t\tswitch (c) {\n\t\tcase \'D\':\n\t\t\tdevice = optarg;\n\t\t\tbreak;\n\t\tcase \'s\':\n\t\t\tspeed = atoi(optarg);\n\t\t\tbreak;\n\t\tcase \'d\':\n\t\t\tdelay = atoi(optarg);\n\t\t\tbreak;\n\t\tcase \'b\':\n\t\t\tbits = atoi(optarg);\n\t\t\tbreak;\n\t\tcase \'i\':\n\t\t\tinput_file = optarg;\n\t\t\tbreak;\n\t\tcase \'o\':\n\t\t\toutput_file = optarg;\n\t\t\tbreak;\n\t\tcase \'l\':\n\t\t\tmode |= SPI_LOOP;\n\t\t\tbreak;\n\t\tcase \'H\':\n\t\t\tmode |= SPI_CPHA;\n\t\t\tbreak;\n\t\tcase \'O\':\n\t\t\tmode |= SPI_CPOL;\n\t\t\tbreak;\n\t\tcase \'L\':\n\t\t\tmode |= SPI_LSB_FIRST;\n\t\t\tbreak;\n\t\tcase \'C\':\n\t\t\tmode |= SPI_CS_HIGH;\n\t\t\tbreak;\n\t\tcase \'3\':\n\t\t\tmode |= SPI_3WIRE;\n\t\t\tbreak;\n\t\tcase \'N\':\n\t\t\tmode |= SPI_NO_CS;\n\t\t\tbreak;\n\t\tcase \'v\':\n\t\t\tverbose = 1;\n\t\t\tbreak;\n\t\tcase \'R\':\n\t\t\tmode |= SPI_READY;\n\t\t\tbreak;\n\t\tcase \'p\':\n\t\t\tinput_tx = optarg;\n\t\t\tbreak;\n\t\tcase \'2\':\n\t\t\tmode |= SPI_TX_DUAL;\n\t\t\tbreak;\n\t\tcase \'4\':\n\t\t\tmode |= SPI_TX_QUAD;\n\t\t\tbreak;\n\t\tcase \'S\':\n\t\t\ttransfer_size = atoi(optarg);\n\t\t\tbreak;\n\t\tcase \'I\':\n\t\t\titerations = atoi(optarg);\n\t\t\tbreak;\n\t\tcase \'e\':\n\t\t\text_mode = atoi(optarg);\n\t\t\tbreak;\n\t\tcase \'h\':\n\t\t\tprint_usage(argv[0]);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tprint_usage(argv[0]);\n\t\t}\n\t}\n\tif (mode & SPI_LOOP) {\n\t\tif (mode & SPI_TX_DUAL)\n\t\t\tmode |= SPI_RX_DUAL;\n\t\tif (mode & SPI_TX_QUAD)\n\t\t\tmode |= SPI_RX_QUAD;\n\t}\n}\n\nstatic void transfer_escaped_string(int fd, char *str)\n{\n\tsize_t size = strlen(str);\n\tuint8_t *tx;\n\tuint8_t *rx;\n\n\ttx = malloc(size);\n\tif (!tx)\n\t\tpabort("can\'t allocate tx buffer");\n\n\trx = malloc(size);\n\tif (!rx)\n\t\tpabort("can\'t allocate rx buffer");\n\n\tsize = unescape((char *)tx, str, size);\n\ttransfer(fd, tx, rx, size);\n\tfree(rx);\n\tfree(tx);\n}\n\nstatic void transfer_file(int fd, char *filename)\n{\n\tssize_t bytes;\n\tstruct stat sb;\n\tint tx_fd;\n\tuint8_t *tx;\n\tuint8_t *rx;\n\n\tif (stat(filename, &sb) == -1)\n\t\tpabort("can\'t stat input file");\n\n\ttx_fd = open(filename, O_RDONLY);\n\tif (tx_fd < 0)\n\t\tpabort("can\'t open input file");\n\n\ttx = malloc(sb.st_size);\n\tif (!tx)\n\t\tpabort("can\'t allocate tx buffer");\n\n\trx = malloc(sb.st_size);\n\tif (!rx)\n\t\tpabort("can\'t allocate rx buffer");\n\n\tbytes = read(tx_fd, tx, sb.st_size);\n\tif (bytes != sb.st_size)\n\t\tpabort("failed to read input file");\n\n\ttransfer(fd, tx, rx, sb.st_size);\n\tfree(rx);\n\tfree(tx);\n\tclose(tx_fd);\n}\n\nstatic uint64_t _read_count;\nstatic uint64_t _write_count;\n\nstatic void show_transfer_rate(void)\n{\n\tstatic uint64_t prev_read_count, prev_write_count;\n\tdouble rx_rate, tx_rate;\n\n\trx_rate = ((_read_count - prev_read_count) * 8) / (interval*1000.0);\n\ttx_rate = ((_write_count - prev_write_count) * 8) / (interval*1000.0);\n\n\tprintf("rate: tx %.1fkbps, rx %.1fkbps\\n", rx_rate, tx_rate);\n\n\tprev_read_count = _read_count;\n\tprev_write_count = _write_count;\n}\n\nstatic void transfer_buf(int fd, int len)\n{\n\tuint8_t *tx;\n\tuint8_t *rx;\n\tint i;\n\n\ttx = malloc(len);\n\tif (!tx)\n\t\tpabort("can\'t allocate tx buffer");\n\tfor (i = 0; i < len; i++)\n\t\ttx[i] = random();\n\n\trx = malloc(len);\n\tif (!rx)\n\t\tpabort("can\'t allocate rx buffer");\n\n\ttransfer(fd, tx, rx, len);\n\n\t_write_count += len;\n\t_read_count += len;\n\n\tif (mode & SPI_LOOP) {\n\t\tif (memcmp(tx, rx, len)) {\n\t\t\tfprintf(stderr, "transfer error !\\n");\n\t\t\thex_dump(tx, len, 32, "TX");\n\t\t\thex_dump(rx, len, 32, "RX");\n\t\t\texit(1);\n\t\t}\n\t}\n\n\tfree(rx);\n\tfree(tx);\n}\n\nstatic void transfer_read_write(int fd, int len)\n{\n\tuint8_t *tx;\n\tuint8_t *rx;\n\tint i = 0, j = 0;\n\tchar str[64] = {0};\n\tstruct timespec last_stat;\n\tstruct timespec current;\n\n\tif (ext_mode == 2)\n\t\tsprintf(str, "write");\n\telse if (ext_mode == 3)\n\t\tsprintf(str, "read and write");\n\telse {\n\t\text_mode = 1;\n\t\tsprintf(str, "read");\n\t}\n\n\tprintf("Userspace spi %s test, test_len=%d iterations=%d\\n", str, len, iterations);\n\n\ttx = malloc(len);\n\tif (!tx)\n\t\tpabort("can\'t allocate tx buffer");\n\trx = malloc(len);\n\tif (!rx)\n\t\tpabort("can\'t allocate rx buffer");\n\n\tclock_gettime(CLOCK_MONOTONIC, &last_stat);\n\twhile (iterations == -1 || j < iterations) {\n\t\tmemset(tx, 0 , len);\n\t\tmemset(rx, 0, len);\n\n\t\tif (ext_mode >> 1) {\n\t\t\tfor (i = 0; i < len; i++)\n\t\t\t\ttx[i] = random();\n\t\t} else {\n\t\t\tfor (i = 0; i < len; i++)\n\t\t\t\ttx[i] = i << 2;\n\t\t}\n\n\t\ttransfer(fd, tx, rx, len);\n\n\t\t_write_count += len;\n\t\t_read_count += len;\n\n\t\tclock_gettime(CLOCK_MONOTONIC, &current);\n\t\tif (verbose && current.tv_sec - last_stat.tv_sec > interval) {\n\t\t\tshow_transfer_rate();\n\t\t\tlast_stat = current;\n\t\t}\n\n\t\tif (ext_mode == 3) {\n\t\t\tprintf("Test times: %d Data verification %s\\n", j, memcmp(tx, rx, len) == 0 ? "Successful" : "Failed");\n\t\t} else {\n\t\t\tprintf("Test times: %d\\n", j);\n\t\t}\n\t\tj++;\n\t}\n\n\tfree(rx);\n\tfree(tx);\n}\n\nint main(int argc, char *argv[])\n{\n\tint ret = 0;\n\tint fd;\n\tuint32_t request;\n\n\tparse_opts(argc, argv);\n\n\tif (input_tx && input_file)\n\t\tpabort("only one of -p and --input may be selected");\n\n\tfd = open(device, O_RDWR);\n\tif (fd < 0)\n\t\tpabort("can\'t open device");\n\n\t/*\n\t * spi mode\n\t */\n\t/* WR is make a request to assign \'mode\' */\n\trequest = mode;\n\tret = ioctl(fd, SPI_IOC_WR_MODE32, &mode);\n\tif (ret == -1)\n\t\tpabort("can\'t set spi mode");\n\n\t/* RD is read what mode the device actually is in */\n\tret = ioctl(fd, SPI_IOC_RD_MODE32, &mode);\n\tif (ret == -1)\n\t\tpabort("can\'t get spi mode");\n\t/* Drivers can reject some mode bits without returning an error.\n\t * Read the current value to identify what mode it is in, and if it\n\t * differs from the requested mode, warn the user.\n\t */\n\tif (request != mode)\n\t\tprintf("WARNING device does not support requested mode 0x%x\\n",\n\t\t\trequest);\n\n\t/*\n\t * bits per word\n\t */\n\tret = ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &bits);\n\tif (ret == -1)\n\t\tpabort("can\'t set bits per word");\n\n\tret = ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, &bits);\n\tif (ret == -1)\n\t\tpabort("can\'t get bits per word");\n\n\t/*\n\t * max speed hz\n\t */\n\tret = ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &speed);\n\tif (ret == -1)\n\t\tpabort("can\'t set max speed hz");\n\n\tret = ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &speed);\n\tif (ret == -1)\n\t\tpabort("can\'t get max speed hz");\n\n\tprintf("spi mode: 0x%x\\n", mode);\n\tprintf("bits per word: %u\\n", bits);\n\tprintf("max speed: %u Hz (%u kHz)\\n", speed, speed/1000);\n\n\tif (input_tx)\n\t\ttransfer_escaped_string(fd, input_tx);\n\telse if (input_file) {\n\t\ttransfer_file(fd, input_file);\n\t} else if (ext_mode && transfer_size) {\n\t\ttransfer_read_write(fd, transfer_size);\n\t} else if (transfer_size) {\n\t\tstruct timespec last_stat;\n\n\t\tclock_gettime(CLOCK_MONOTONIC, &last_stat);\n\n\t\twhile (iterations-- > 0) {\n\t\t\tstruct timespec current;\n\n\t\t\ttransfer_buf(fd, transfer_size);\n\n\t\t\tclock_gettime(CLOCK_MONOTONIC, &current);\n\t\t\tif (current.tv_sec - last_stat.tv_sec > interval) {\n\t\t\t\tshow_transfer_rate();\n\t\t\t\tlast_stat = current;\n\t\t\t}\n\t\t}\n\t\tprintf("total: tx %.1fKB, rx %.1fKB\\n",\n\t\t\t\t_write_count/1024.0, _read_count/1024.0);\n\t} else\n\t\ttransfer(fd, default_tx, default_rx, sizeof(default_tx));\n\n\tclose(fd);\n\n\treturn ret;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\u9644\u5f552 \u6d4b\u8bd5\u7528\u4f8b\u6e90\u7801\uff1aMakefile"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"OUT_DIR = $(shell pwd)/_build/\n\n.PHONY: build install clean\n\nBIN_NAME = spidev_tc\nSRCS = $(wildcard ./*.c)\nOBJS = $(addprefix ${OUT_DIR}/, $(patsubst %.c, %.o, ${SRCS}))\n\nBIN_TEST1 = ${OUT_DIR}/${BIN_NAME}\nOBJECT = ${BIN_TEST1}\n\nbuild: ${OBJECT}\n\nQ:=\n\n$(OBJECT): $(OBJS)\n\t$(Q)mkdir -p $(abspath $(dir $@))\n\t$(Q)echo CC $@\n\t$(Q)${CC} ${CFLAGS} ${INCS} $^ ${LDFLAGS} $(LIBS) -o $@\n\n${OUT_DIR}/%.o: %.c\n\t$(Q)mkdir -p $(abspath $(dir $@))\n\t$(Q)echo CC $@\n\t$(Q)${CC} $(INCS) -c $< -o $@\n\nclean :\n\trm -rf $(OBJS) $(OBJECT)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u5e38\u89c1\u95ee\u9898",children:"\u5e38\u89c1\u95ee\u9898"}),"\n",(0,s.jsx)(n.p,{children:"Q\uff1a\u5f15\u811a\u90fd\u8fde\u63a5\u597d\u4e86\uff0c\u6267\u884c\u4e86\u7a0b\u5e8f\uff0c\u4f46\u8fd8\u662f\u6ca1\u6709\u770b\u5230\u671f\u671b\u7684\u7ed3\u679c\uff0c\u662f\u600e\u4e48\u56de\u4e8b\uff1f"}),"\n",(0,s.jsxs)(n.p,{children:["A\uff1a\u53ef\u4ee5\u62ff\u51fa\u793a\u6ce2\u5668\u6216\u8005\u5176\u4ed6\u4fe1\u53f7\u6d4b\u91cf\u7684\u8bbe\u5907\uff0c\u8fde\u63a5\u60f3\u6d4b\u91cf\u7684\u5f15\u811a\uff0c\u8fdb\u884c\u6d4b\u91cf\u3002",(0,s.jsx)(n.br,{}),"\n","\u6bd4\u5982\u4e0a\u8ff0\u7684\u5916\u90e8\u56de\u73af\u6d4b\u8bd5\uff0c\u6211\u4eec\u786e\u8ba4\u63a5\u7ebf\u6b63\u786e\u4e4b\u540e\uff0c\u6d4b\u91cf\u7247\u9009\u548c\u65f6\u949f\u4fe1\u53f7\u3002\u53c2\u8003\u5982\u4e0b\uff1a"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/07_Advanced_development/02_linux_development/driver_development_x5/spidriver_spi-pin-connect.png",alt:"image-spidriver_spi-pin-connect"}),"\n",(0,s.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/07_Advanced_development/02_linux_development/driver_development_x5/spidriver_snn_clk_loop_1.png",alt:"image-spidriver_snn_clk_loop_1"}),"\n",(0,s.jsx)(n.img,{src:"https://rdk-doc.oss-cn-beijing.aliyuncs.com/doc/img/07_Advanced_development/02_linux_development/driver_development_x5/spidriver_snn_clk_loop_100.png",alt:"image-spidriver_snn_clk_loop_100"})]})]})}function _(t={}){const{wrapper:n}={...(0,r.R)(),...t.components};return n?(0,s.jsx)(n,{...t,children:(0,s.jsx)(o,{...t})}):o(t)}}}]);