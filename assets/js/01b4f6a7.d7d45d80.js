"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[71380],{28453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>o});var r=n(96540);const i={},s=r.createContext(i);function d(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(s.Provider,{value:t},e.children)}},57295:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Advanced_development/mcu_development/S100/mcu_eth","title":"Eth\u4f7f\u7528\u6307\u5357","description":"\u57fa\u672c\u6982\u8ff0","source":"@site/docs_s/07_Advanced_development/05_mcu_development/01_S100/11_mcu_eth.md","sourceDirName":"07_Advanced_development/05_mcu_development/01_S100","slug":"/Advanced_development/mcu_development/S100/mcu_eth","permalink":"/rdk_doc/rdk_s/Advanced_development/mcu_development/S100/mcu_eth","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1761541015000,"sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"I2C\u4f7f\u7528\u6307\u5357","permalink":"/rdk_doc/rdk_s/Advanced_development/mcu_development/S100/mcu_i2c"},"next":{"title":"PORT\u6a21\u5757\u6307\u5357","permalink":"/rdk_doc/rdk_s/07_Advanced_development/05_mcu_development/01_S100/12_mcu_port"}}');var i=n(74848),s=n(28453);const d={sidebar_position:11},o="Eth\u4f7f\u7528\u6307\u5357",l={},c=[{value:"\u57fa\u672c\u6982\u8ff0",id:"\u57fa\u672c\u6982\u8ff0",level:2},{value:"\u786c\u4ef6\u7279\u6027",id:"\u786c\u4ef6\u7279\u6027",level:3},{value:"\u5047\u8bbe\u548c\u9650\u5236",id:"\u5047\u8bbe\u548c\u9650\u5236",level:3},{value:"\u4ee3\u7801\u8def\u5f84",id:"\u4ee3\u7801\u8def\u5f84",level:2},{value:"\u5e94\u7528sample",id:"\u5e94\u7528sample",level:2},{value:"\u6570\u636e\u53d1\u9001",id:"\u6570\u636e\u53d1\u9001",level:3},{value:"\u6570\u636e\u63a5\u6536",id:"\u6570\u636e\u63a5\u6536",level:3},{value:"\u6ce8\u610f\u4e8b\u9879",id:"\u6ce8\u610f\u4e8b\u9879",level:3},{value:"\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3",id:"\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3",level:3},{value:"void Eth_Init( const Eth_ConfigType* CfgPtr )",id:"void-eth_init-const-eth_configtype-cfgptr-",level:4},{value:"Std_ReturnType Eth_SetControllerMode(uint8 CtrlIdx, Eth_ModeType CtrlMode)",id:"std_returntype-eth_setcontrollermodeuint8-ctrlidx-eth_modetype-ctrlmode",level:4},{value:"Std_ReturnType Eth_GetControllerMode(uint8 CtrlIdx, Eth_ModeType* CtrlModePtr)",id:"std_returntype-eth_getcontrollermodeuint8-ctrlidx-eth_modetype-ctrlmodeptr",level:4},{value:"void Eth_GetPhysAddr(uint8 CtrlIdx, uint8* PhysAddrPtr)",id:"void-eth_getphysaddruint8-ctrlidx-uint8-physaddrptr",level:4},{value:"void Eth_SetPhysAddr(uint8 CtrlIdx, const uint8* PhysAddrPtr)",id:"void-eth_setphysaddruint8-ctrlidx-const-uint8-physaddrptr",level:4},{value:"Std_ReturnType Eth_GetCurrentTime(uint8 CtrlIdx, Eth_TimeStampQualType* timeQualPtr, Eth_TimeStampType* timeStampPtr)",id:"std_returntype-eth_getcurrenttimeuint8-ctrlidx-eth_timestampqualtype-timequalptr-eth_timestamptype-timestampptr",level:4},{value:"BufReq_ReturnType Eth_ProvideTxBuffer(uint8 CtrlIdx, uint8 Priority, Eth_BufIdxType *BufIdxPtr, uint8 **BufPtr, uint16 *LenBytePtr)",id:"bufreq_returntype-eth_providetxbufferuint8-ctrlidx-uint8-priority-eth_bufidxtype-bufidxptr-uint8-bufptr-uint16-lenbyteptr",level:4},{value:"Std_ReturnType Eth_Transmit(uint8 CtrlIdx, Eth_BufIdxType BufIdx, Eth_FrameType FrameType, boolean TxConfirmation, uint16 LenByte, const uint8* PhysAddrPtr)",id:"std_returntype-eth_transmituint8-ctrlidx-eth_bufidxtype-bufidx-eth_frametype-frametype-boolean-txconfirmation-uint16-lenbyte-const-uint8-physaddrptr",level:4},{value:"Void Eth_Receive(uint8 CtrlIdx, uint8 FifoIdx, Eth_RxStatusType* RxStatusPtr)",id:"void-eth_receiveuint8-ctrlidx-uint8-fifoidx-eth_rxstatustype-rxstatusptr",level:4},{value:"void Eth_TxConfirmation(uint8 CtrlIdx)",id:"void-eth_txconfirmationuint8-ctrlidx",level:4},{value:"Std_ReturnType Eth_EnableSnapshot(uint8 CtrlIdx, GMAC_PPS_SOURCE PpsSource)",id:"std_returntype-eth_enablesnapshotuint8-ctrlidx-gmac_pps_source-ppssource",level:4},{value:"Std_ReturnType Eth_GetSnapshotTime(uint8 CtrlIdx, Eth_TimeStampType * TimeStampPtr)",id:"std_returntype-eth_getsnapshottimeuint8-ctrlidx-eth_timestamptype--timestampptr",level:4}];function a(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"eth\u4f7f\u7528\u6307\u5357",children:"Eth\u4f7f\u7528\u6307\u5357"})}),"\n",(0,i.jsx)(t.h2,{id:"\u57fa\u672c\u6982\u8ff0",children:"\u57fa\u672c\u6982\u8ff0"}),"\n",(0,i.jsx)(t.h3,{id:"\u786c\u4ef6\u7279\u6027",children:"\u786c\u4ef6\u7279\u6027"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"\u6700\u5927\u652f\u63011000Mbps\u6570\u636e\u4f20\u8f93\u901f\u7387"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"\u652f\u6301\u5168\u53cc\u5de5\u6d41\u63a7\u64cd\u4f5c(\u5305\u62ecIEEE 802.3x Pause packets and Priority flow control)"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"\u652f\u6301\u7f51\u7edc\u7edf\u8ba1\u529f\u80fd"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"\u652f\u6301IEEE 1588-2002/1588-2008\u6807\u51c6\u5b9a\u4e49\u7684\u4ee5\u592a\u7f51\u62a5\u6587\u65f6\u95f4\u6233"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"\u652f\u6301\u8f93\u51faPPS\u79d2\u8109\u51b2\u4fe1\u53f7"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"\u652f\u6301\u53ef\u7f16\u7a0b\u4ee5\u592a\u7f51\u5e27\u957f\u5ea6\uff0c\u6700\u5927\u652f\u630116KB"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"\u5047\u8bbe\u548c\u9650\u5236",children:"\u5047\u8bbe\u548c\u9650\u5236"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"\u53d1\u9001\u548c\u63a5\u6536\u65b9\u5411\u7684FIFO\u6700\u591a\u5404\u652f\u63016\u4e2a\u3002"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"\u4e0d\u652f\u6301\u4f20\u8f93\u8d85\u8fc7\u6240\u4f7f\u7528\u63a7\u5236\u5668\u53ef\u7528\u7f13\u51b2\u533a\u5927\u5c0f\u7684\u6570\u636e\uff0c\u8f83\u957f\u7684\u6570\u636e\u5fc5\u987b\u4f7f\u7528Internet\u534f\u8bae(IP)\u548c\u4f20\u8f93\u63a7\u5236\u534f\u8bae(TCP)\u4f20\u8f93\u3002"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"\u5355\u4e2a\u63a5\u6536\u5e27\u7684\u957f\u5ea6(\u5305\u62ec14\u5b57\u8282\u7684\u4ee5\u592a\u7f51\u5e27\u5934\u548c4\u5b57\u8282\u7684FCS)\u5fc5\u987b\u5c0f\u4e8e\u6216\u7b49\u4e8eRX buffer\u7684\u914d\u7f6e\u957f\u5ea6\u3002"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"\u6a21\u5757\u65f6\u949f\u9891\u7387\u4e3a300M\uff0cPTP\u65f6\u949f\u5468\u671f\u4e3a20ns\u3002"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"\u4ee3\u7801\u8def\u5f84",children:"\u4ee3\u7801\u8def\u5f84"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"McalCdd/Ethernet/inc # \u5934\u6587\u4ef6"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"McalCdd/Ethernet/src/Eth.c # \u63d0\u4f9b\u5bf9\u5916API\u63a5\u53e3"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"McalCdd/Ethernet/src/Eth_Interrupt.c # \u4e2d\u65ad\u5904\u7406\u56de\u8c03\u51fd\u6570\u5904\u7406\u63a5\u53e3"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"McalCdd/Ethernet/src/Mac_Lld.c # \u5c01\u88c5\u5bc4\u5b58\u5668\u63a7\u5236\u63a5\u53e3\uff0c\u4f9bAPI\u63a5\u53e3\u8c03\u7528"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Config/McalCdd/gen_s100_sip_B_mcu1/Ethernet/src/Eth_PBcfg.c # Eth\u9884\u7f16\u8bd1\u914d\u7f6e\uff0c\u7528\u4e8e\u63d0\u4f9b\u7ed9\u5bf9\u5916\u63a5\u53e3API\u521d\u59cb\u5316\u5c5e\u6027\u8c03\u7528"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Config/McalCdd/gen_s100_sip_B_mcu1/Ethernet/src/Mac_Ip_PBcfg.c # MAC\u9a71\u52a8\u9884\u7f16\u8bd1\u914d\u7f6e\uff0c\u5bf9Eth_PBcfg.c\u6784\u6210\u9759\u6001\u914d\u7f6e\u4f9d\u8d56"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"samples/Eth/Eth_Test/Eth_test.c # Eth\u529f\u80fd\u6d4b\u8bd5\u793a\u4f8b\u7a0b\u5e8f"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"\u5e94\u7528sample",children:"\u5e94\u7528sample"}),"\n",(0,i.jsxs)(t.p,{children:["S100\u4ee5",(0,i.jsx)(t.code,{children:"samples/Eth/Eth_Test/Eth_test.c"}),"\u53d1\u9001arp\u62a5\u6587\u4e3a\u4f8b\u8bf4\u660e\uff1a"]}),"\n",(0,i.jsx)(t.h3,{id:"\u6570\u636e\u53d1\u9001",children:"\u6570\u636e\u53d1\u9001"}),"\n",(0,i.jsx)(t.p,{children:"Eth_test.c\u6d4b\u8bd5\u7a0b\u5e8f\u5916\u53d1\u6784\u9020\u7684arp\u62a5\u6587\uff0cPC\u901a\u8fc7wiresharke\u6293\u5305\u68c0\u67e5\u6570\u636e\u80fd\u5426\u6b63\u5e38\u6536\u5230\u3002\u5176\u4e2d\uff0cIP\u5730\u5740\u9ed8\u8ba4\u4e14\u4e0d\u652f\u6301\u52a8\u6001\u4fee\u6539\u3002"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"0xd4, 0xfd, 0x9b, 0xae, 0x48, 0xf5, //Sender MAC address: d4:fd:9b:ae:48:f5  //MCU\n0xC0, 0xA8, 0x01, 0x32,             //Sender IP address: 192.168.1.50\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Target MAC address: 00:00:00:00:00:00  //PC\n0xC0, 0xA8, 0x01, 0xf,             //Target IP address: 192.168.1.15\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"\u8c03\u7528\u4f2a\u4ee3\u7801"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Eth_ProvideTxBuffer //\u5206\u914dbuffer\nEth_Transmit //\u6570\u636e\u53d1\u9001\nEth_TxConfirmation //\u91ca\u653ebuffer\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"\u6d4b\u8bd5\u8bf4\u660e"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"\u7cfb\u7edf\u542f\u52a8\u9ed8\u8ba4\u53ea\u5b8c\u6210eth\u521d\u59cb\u5316\uff0c\u6570\u636e\u53d1\u9001\u6b65\u9aa4\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"# \u4f7f\u80fdEthTest_Mainfunc\u5468\u671f\u6027\u8c03\u7528\nsetvar Eth_Test 1\n\n# eth up\nsetvar eth_contrMode 1\nsetvar eth_testCase 3\n\n# \u53d1\u9001arp\u62a5\u6587\nsetvar eth_testCase 14\n"})}),"\n",(0,i.jsx)(t.h3,{id:"\u6570\u636e\u63a5\u6536",children:"\u6570\u636e\u63a5\u6536"}),"\n",(0,i.jsx)(t.p,{children:"\u5728EthIf_RxIndication\u91cc\u628a\u63a5\u6536\u7684\u62a5\u6587\u901a\u8fc7\u4e32\u53e3\u6253\u5370\u51fa\u6765\u3002\u53c2\u8003\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'if(eth_getIngressTsFlag)\n{\n    eth_getIngressTsFlag = FALSE;\n    /* QT-S01-API-60105 QT-S01-API-60106 QT-S01-API-60107 QT-S01-API-60194 */\n    Eth_GetIngressTimeStamp(CtrlIdx,DataPtr,&Eth_TimeQual,&Eth_TimeStamp);\n    //LogSync("Ingress timestamp quality: %s\\r\\n", (Eth_TimeQual==ETH_VALID)?"ETH_VALID":"ETH_INVALID");\n    //LogSync("Ingress timestamp: %ds: %dns\\r\\n", ((uint32)(Eth_TimeStamp.secondsHi) << 16) + Eth_TimeStamp.seconds, Eth_TimeStamp.nanoseconds);\n    if(Eth_TimeStamp.secondsHi!=0 || Eth_TimeStamp.nanoseconds!=0)\n    {\n        eth_checkIngressTsFlg=TRUE;\n    }\n}\n\nif (count % 100 == 0) {\n    LogSync("Eth packet is received, FrameType: %x, IsBroadcast: %s\\r\\n", FrameType, (IsBroadcast==TRUE)?"TRUE":"FALSE");\n    LogSync("DstMac: %x-%x-%x-%x-%x-%x\\r\\n", *(DataPtr-14),*(DataPtr-13),*(DataPtr-12),*(DataPtr-11),*(DataPtr-10),*(DataPtr-9));\n    LogSync("SrcMac: %x-%x-%x-%x-%x-%x\\r\\n", PhysAddrPtr[0],PhysAddrPtr[1],PhysAddrPtr[2],PhysAddrPtr[3],PhysAddrPtr[4],PhysAddrPtr[5]);\n}\ncount++;\nif(FrameType==0x800)\n{\n    LogSync("IP header checksum:%x,%x\\r\\n",DataPtr[10],DataPtr[11]);\n    if(DataPtr[9]==0x11)//UDP\n    {\n        LogSync("UDP checksum:%x,%x\\r\\n",DataPtr[26],DataPtr[27]);\n        eth_checkCksFlg=TRUE;\n    }\n    else if(DataPtr[9]==0x6)//tcp\n    {\n        LogSync("TCP checksum:%x,%x\\r\\n",DataPtr[36],DataPtr[37]);\n        eth_checkCksFlg=TRUE;\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"\u6ce8\u610f\u4e8b\u9879",children:"\u6ce8\u610f\u4e8b\u9879"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"S100\u9ed8\u8ba4\u6570\u636e\u4f20\u8f93\u6a21\u5f0f\u662f\u8f6e\u8be2\u3002\u8f6e\u8be2\u6a21\u5f0f\u4e0b\u7684\u6570\u636e\u53d1\u9001\u9700\u8981\u6ce8\u610f\u7533\u8bf7\u7684buffer\u5728transmit\u53d1\u9001\u4e4b\u540e\uff0c\u8c03\u7528Eth_TxConfirmation\u91ca\u653ebuffer\u3002"}),"\n",(0,i.jsx)(t.li,{children:"Eth_Init\u4e4b\u524d\u9700\u8981phy\u89e3\u590d\u4f4d\u4fdd\u8bc1\u521d\u59cb\u5316\u6210\u529f\uff0cS100\u4e0a\u5c06phy reset pin\u62c9\u9ad8\u5b9e\u73b0\u89e3\u590d\u4f4d"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3",children:"\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3"}),"\n",(0,i.jsx)(t.h4,{id:"void-eth_init-const-eth_configtype-cfgptr-",children:"void Eth_Init( const Eth_ConfigType* CfgPtr )"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aInitializes the Ethernet Driver.\n\nSync/Async: Synchronous\nParameters(in)\n    CfgPtr: Points to the implementation specific structure\nParameters(inout)\n    None\nParameters(out)\n    None\nReturn value\uff1aNone\n"})}),"\n",(0,i.jsx)(t.h4,{id:"std_returntype-eth_setcontrollermodeuint8-ctrlidx-eth_modetype-ctrlmode",children:"Std_ReturnType Eth_SetControllerMode(uint8 CtrlIdx, Eth_ModeType CtrlMode)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aEnables / disables the indexed controller.\n\nSync/Async: Asynchronous\nParameters(in)\n    CtrlIdx: Index of the controller within the context of the Ethernet Driver\n    CtrlMode: ETH_MODE_DOWN: disable the controller; ETH_MODE_ACTIVE: enable the controller\nParameters(inout)\n    None\nParameters(out)\n    None\nReturn value\uff1aStd_ReturnType\n    E_OK: success\n    E_NOT_OK: controller mode could not be changed\n"})}),"\n",(0,i.jsx)(t.h4,{id:"std_returntype-eth_getcontrollermodeuint8-ctrlidx-eth_modetype-ctrlmodeptr",children:"Std_ReturnType Eth_GetControllerMode(uint8 CtrlIdx, Eth_ModeType* CtrlModePtr)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aEnables / disables the indexed controller.\n\nSync/Async: Synchronous\nParameters(in)\n    CtrlIdx: Index of the controller within the context of the Ethernet Driver\nParameters(inout)\n    CtrlModePtr: ETH_MODE_DOWN: disable the controller; ETH_MODE_ACTIVE: enable the controller\nParameters(out)\n    None\nReturn value\uff1aStd_ReturnType\n    E_OK: success\n    E_NOT_OK: controller mode could not be obtained\n"})}),"\n",(0,i.jsx)(t.h4,{id:"void-eth_getphysaddruint8-ctrlidx-uint8-physaddrptr",children:"void Eth_GetPhysAddr(uint8 CtrlIdx, uint8* PhysAddrPtr)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aObtains the physical source address used by the indexed controller.\n\nSync/Async: Synchronous\nParameters(in)\n    CtrlIdx: Index of the controller within the context of the Ethernet Driver\nParameters(inout)\n    PhysAddrPtr: Physical source address (MAC address) in network byte order\nParameters(out)\n    None\nReturn value\uff1aNone\n"})}),"\n",(0,i.jsx)(t.h4,{id:"void-eth_setphysaddruint8-ctrlidx-const-uint8-physaddrptr",children:"void Eth_SetPhysAddr(uint8 CtrlIdx, const uint8* PhysAddrPtr)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aSets the physical source address used by the indexed controller.\n\nSync/Async: Synchronous\nParameters(in)\n    CtrlIdx: Index of the controller within the context of the Ethernet Driver\n    PhysAddrPtr: Pointer to memory containing the physical source address (MAC address) in network byte order\nParameters(inout)\n    None\nParameters(out)\n    None\nReturn value\uff1aNone\n"})}),"\n",(0,i.jsx)(t.h4,{id:"std_returntype-eth_getcurrenttimeuint8-ctrlidx-eth_timestampqualtype-timequalptr-eth_timestamptype-timestampptr",children:"Std_ReturnType Eth_GetCurrentTime(uint8 CtrlIdx, Eth_TimeStampQualType* timeQualPtr, Eth_TimeStampType* timeStampPtr)"}),"\n",(0,i.jsx)(t.admonition,{title:"\u6ce8\u610f",type:"info",children:(0,i.jsx)(t.p,{children:"Eth_GetCurrentTime may be called within an exclusive area."})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aReturns a time value out of the HW registers according to the capability of the HW. Is the HW resolution is lower than the Eth_TimeStampType resolution resp.range, than an the remaining bits will be filled with 0.\n\nSync/Async: Synchronous\nParameters(in)\n    CtrlIdx: Index of the controller within the context of the Ethernet Driver\nParameters(inout)\n    None\nParameters(out)\n    timeQualPtr: Quality of HW time stamp, e.g. based on current drift\n    timeStampPtr: Current time stamp\nReturn value\uff1aStd_ReturnType\n    E_OK: success\n    E_NOT_\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"bufreq_returntype-eth_providetxbufferuint8-ctrlidx-uint8-priority-eth_bufidxtype-bufidxptr-uint8-bufptr-uint16-lenbyteptr",children:"BufReq_ReturnType Eth_ProvideTxBuffer(uint8 CtrlIdx, uint8 Priority, Eth_BufIdxType *BufIdxPtr, uint8 **BufPtr, uint16 *LenBytePtr)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aProvides access to a transmit buffer of the FIFO related to the specified priority.\n\nSync/Async: Synchronous\nParameters(in)\n    CtrlIdx: Index of the controller\n    Priority: Frame priority for transmit buffer FIFO selection\nParameters(inout)\n    LenBytePtr: In: desired length in bytes, out: granted length in bytes\nParameters(out)\n    BufIdxPtr: Index to the granted buffer resource. To be used for subsequent requests\n    BufPtr: Pointer to the granted buffer\nReturn value\uff1aBufReq_ReturnType\n    BUFREQ_OK: success\n    BUFREQ_E_NOT_OK: development error detected\n    BUFREQ_E_BUSY: all buffers in use\n    BUFREQ_E_OVFL: requested buffer too large\n"})}),"\n",(0,i.jsx)(t.h4,{id:"std_returntype-eth_transmituint8-ctrlidx-eth_bufidxtype-bufidx-eth_frametype-frametype-boolean-txconfirmation-uint16-lenbyte-const-uint8-physaddrptr",children:"Std_ReturnType Eth_Transmit(uint8 CtrlIdx, Eth_BufIdxType BufIdx, Eth_FrameType FrameType, boolean TxConfirmation, uint16 LenByte, const uint8* PhysAddrPtr)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aDescription\uff1aTriggers transmission of a previously filled transmit buffer.\n\nSync/Async: Synchronous\nParameters(in)\n    CtrlIdx: Index of the controller\n    BufIdx: Index of the buffer resource\n    FrameType: Ethernet frame type\n    TxConfirmation: Activates transmission confirmation\n    LenByte: Data length in byte\n    PhysAddrPtr: Physical target address (MAC address) in network byte order\nParameters(inout)\n    None\nParameters(out)\n    None\nReturn value\uff1aStd_ReturnType\n    E_OK: success\n    E_NOT_OK: transmission failed\n"})}),"\n",(0,i.jsx)(t.h4,{id:"void-eth_receiveuint8-ctrlidx-uint8-fifoidx-eth_rxstatustype-rxstatusptr",children:"Void Eth_Receive(uint8 CtrlIdx, uint8 FifoIdx, Eth_RxStatusType* RxStatusPtr)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aReceive a frame from the related fifo.\n\nSync/Async: Synchronous\nParameters(in)\n    CtrlIdx: Index of the controller\n    FifoIdx: Specifies the related fifo\nParameters(inout)\n    None\nParameters(out)\n    RxStatusPtr: Indicates whether a frame has been received and if so, whether more frames are available for the related fifo.\nReturn value\uff1aNone\n"})}),"\n",(0,i.jsx)(t.h4,{id:"void-eth_txconfirmationuint8-ctrlidx",children:"void Eth_TxConfirmation(uint8 CtrlIdx)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aTriggers frame transmission confirmation.\n\nSync/Async: Synchronous\nParameters(in)\n    CtrlIdx: Index of the controller\nParameters(inout)\n    None\nParameters(out)\n    None\nReturn value\uff1aNone\n"})}),"\n",(0,i.jsx)(t.h4,{id:"std_returntype-eth_enablesnapshotuint8-ctrlidx-gmac_pps_source-ppssource",children:"Std_ReturnType Eth_EnableSnapshot(uint8 CtrlIdx, GMAC_PPS_SOURCE PpsSource)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aSet snapshot source.\n\nSync/Async: Asynchronous\nParameters(in)\n    CtrlIdx: Index of the addresses ETH controller\n    PpsSource: Index of the PPS Source\nParameters(inout)\n    None\nParameters(out)\n    None\nReturn value\uff1aStd_ReturnType\n    E_OK: success\n    E_NOT_OK: failed\n"})}),"\n",(0,i.jsx)(t.h4,{id:"std_returntype-eth_getsnapshottimeuint8-ctrlidx-eth_timestamptype--timestampptr",children:"Std_ReturnType Eth_GetSnapshotTime(uint8 CtrlIdx, Eth_TimeStampType * TimeStampPtr)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Description\uff1aGet snapshot time of PHC.\n\nSync/Async: Asynchronous\nParameters(in)\n    CtrlIdx: Index of the addresses ETH controller\n    TimeStampPtr: Snapshot Time of PHC\nParameters(inout)\n    None\nParameters(out)\n    None\nReturn value\uff1aStd_ReturnType\n    E_OK: success\n    E_NOT_OK: failed\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);